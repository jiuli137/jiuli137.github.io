<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025-2th-parloo-应急响应</title>
      <link href="/2025/05/28/2025-%E7%AC%AC%E4%BA%8C%E5%B1%8AParlooCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2025/05/28/2025-%E7%AC%AC%E4%BA%8C%E5%B1%8AParlooCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="畸形的爱"><a href="#畸形的爱" class="headerlink" title="畸形的爱"></a>畸形的爱</h1><p>资产清单:</p><div class="table-container"><table><thead><tr><th>主机名</th><th>操作系统登录</th><th>服务登录</th></tr></thead><tbody><tr><td>WebServer</td><td>root/root</td><td>webserver/webs erver</td></tr><tr><td>SQL服务器</td><td>sql/sql</td><td></td></tr><tr><td>Windows7 PC 1</td><td>administrator/wmx666</td><td></td></tr><tr><td>Windows10 PC2</td><td>administrator/zjl@123</td></tr></tbody></table></div><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p>提交攻击者使用的攻击ip地址1<br>flag格式为：palu{xxxx}</p><p>查看webserver中nginx的日志，发现有shell.php记录，那没的说肯定是了<br><img src="https://source.yizhixiaojiuli.cn/img/2025-2th-parloo/畸形的爱/1.1.webp" alt="nginx日志"><br>palu{192.168.31.240}</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><p>提交攻击者使用的攻击ip地址2<br>flag格式为：palu{xxxx}</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2025-2th-parloo-crypto-wp</title>
      <link href="/2025/05/23/2025-%E7%AC%AC%E4%BA%8C%E5%B1%8AParlooCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-crypto-wp/"/>
      <url>/2025/05/23/2025-%E7%AC%AC%E4%BA%8C%E5%B1%8AParlooCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-crypto-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="RSA-Quartic-Quandary"><a href="#RSA-Quartic-Quandary" class="headerlink" title="RSA_Quartic_Quandary"></a>RSA_Quartic_Quandary</h2><script type="math/tex; mode=display">\begin{align}s &= p^4 + q^4 \\\\p + q &= \sqrt{\sqrt{(p^2 + q^2)^2} + 2 \cdot p \cdot q} \\&= \sqrt{\sqrt{p^4 + q^4 + 2 \cdot p^2 \cdot q^2} + 2 \cdot p \cdot q} \\&= \sqrt{\sqrt{s + 2 \cdot n^2} + 2 \cdot n} \\\\\phi &= n - (p + q) + 1\end{align}</script><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#python</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 125997816345753096048865891139073286898143461169514858050232837657906289840897974068391106608902082960171083817785532702158298589600947834699494234633846206712414663927142998976208173208829799860130354978308649020815886262453865196867390105038666506017720712272359417586671917060323891124382072599746305448903</span><br><span class="line">e = 65537</span><br><span class="line">c = 16076213508704830809521504161524867240789661063230251272973700316524961511842110066547743812160813341691286895800830395413052502516451815705610447484880112548934311914559776633140762863945819054432492392315491109745915225117227073045171062365772401296382778452901831550773993089344837645958797206220200272941</span><br><span class="line">s = 35935569267272146368441512592153486419244649035623643902985220815940198358146024590300394059909370115858091217597774010493938674472746828352595432824315405933241792789402041405932624651226442192749572918686958461029988244396875361295785103356745756304497466567342796329331150560777052588294638069488836419744297241409127729615544668547101580333420563318486256358906310909703237944327684178950282413703357020770127158209107658407007489563388980582632159120621869165333921661377997970334407786581024278698231418756106787058054355713472306409772260619117725561889350862414726861327985706773512963177174611689685575805282</span><br><span class="line"></span><br><span class="line">p_q = iroot(iroot((s + 2 * n ** 2), 2)[0] + 2 * n, 2)[0]</span><br><span class="line">phi = n - p_q + 1</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">print(long_to_bytes(powmod(c, d, n)))</span><br></pre></td></tr></table></figure><h2 id="欧几里得"><a href="#欧几里得" class="headerlink" title="欧几里得"></a>欧几里得</h2><p>Paillier加密的加法同态性：</p><script type="math/tex; mode=display">\begin{align}\text{Decrypt}(\text{Encrypt}(m_1) \cdot \text{Encrypt}(m_2)) &= m_1 + m_2 \mod n \\m_1 &= \text{Decrypt}(c_1 \cdot c_2) - m_2 \mod n\end{align}</script><p>攻击条件：</p><ul><li>$m_2 = \text{bytes_to_long}(\text{os.urandom}(2) \times 35)$</li><li>$\text{os.urandom}(2) \in [0, 65535]$，可爆破获取$m_2$</li></ul><p>模数处理：</p><ul><li>因$m_1$和$m_2$较小不溢出,所以有没有$n$的差别只在负数上，处理一下负数情况不报错就行</li></ul><p>exp:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#python</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from tqdm import *</span><br><span class="line"></span><br><span class="line">c = 1426774899479339414711783875769670405758108494041927642533743607154735397076811133205075799614352194241060726689487117802867974494099614371033282640015883625484033889861</span><br><span class="line"></span><br><span class="line">for i in trange(65536):</span><br><span class="line">    byte_pair = i.to_bytes(2, &#x27;big&#x27;)</span><br><span class="line">    repeated_bytes = byte_pair * 35</span><br><span class="line">    m2 = bytes_to_long(repeated_bytes)</span><br><span class="line">    m = abs(c - m2)</span><br><span class="line">    if b&#x27;palu&#x27; in long_to_bytes(m):</span><br><span class="line">        print(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="易如反掌"><a href="#易如反掌" class="headerlink" title="易如反掌"></a>易如反掌</h2><p>给定4组RSA参数 $(N_i, E_i)$，其中：</p><ul><li>$N_i = p_i \times q_i$（$p_i, q_i$ 为1024位素数）</li><li>$\Phi_i = (p_i^2 - 1)(q_i^2 - 1)$</li><li>$E_i \equiv d^{-1} \mod \Phi_i$（$d$ 为固定的800位素数）</li></ul><p>由于$\Phi_i \approx N_i^2$，可构建方程：</p><script type="math/tex; mode=display">d \cdot E_i - k_i \cdot N_i^2 = 1</script><p>选择放大系数 $M = 2^{1000}$，构造：</p><script type="math/tex; mode=display">L = \begin{bmatrix}M & E_0 & E_1 & E_2 & E_3 \\0 & -N_0^2 & 0 & 0 & 0 \\0 & 0 & -N_1^2 & 0 & 0 \\0 & 0 & 0 & -N_2^2 & 0 \\0 & 0 & 0 & 0 & -N_3^2 \\\end{bmatrix}</script><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># sage</span><br><span class="line"></span><br><span class="line">from gmpy2 import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">N = [23796646026878116589547283793150995927866567938335548416869023482791889761195291718895745055959853934513618760888513821480917766191633897946306199721200583177442944168533218236080466338723721813833112934172813408785753690869328477108925253250272864647989241887047368829689684698870160049332949549671046125158024445929082758264311584669347802324514633164611600348485747482925940752960745308927584754759033237553398957651216385369140164712159020014009858771182426893515016507774993840721603911101735647966838456333878426803669855790758035721418868768618171692143354466457771363078719423863861881209003100274869680348729, 19552522218179875003847447592795537408210008360038264050591506858077823059915495579150792312404199675077331435544143983146080988327453540449160493126531689234464110427289951139790715136775261122038034076109559997394039408007831367922647325571759843192843854522333120187643778356206039403073606561618190519937691323868253954852564110558105862497499849080112804340364976236598384571278659796189204447521325485338769935361453819608921520780103184296098278610439625935404967972315908808657494638735904210709873823527111315139018387713381604550946445856087746716671838144925662314348628830687634437271225081272705532826343, 20588310030910623387356293638800302031856407530120841616298227518984893505166480372963166394317326422544430837759332223527939420321960057410073228508230111170414845403161052128790464277007579491219950440477721075788978767309211469555824310913593208232853272958011299985202799390532181335087622499894389777412111445377637396650710486263652440053717323053536700098339137819966260269752816515681602936416736576044630343136577023173210517247609888936337876211461528203642347119434700140264859102502126842250671976238033270367185358966766106988830596616311824691409766437473419074865115209866730272194297815209976737570183, 18468380817178794606027384089796802449939260582378979728469492439450780893746976934315768186829245395964644992296264093276556001477514083927556578752836255491334765496791841945178275793885002188397918857222419803612711637177559554489679414049308077300718317502586411333302434329130562745942681716547306138457088216901181646333860559988117376012816579422902808478175975263110581667936249474308868051767856694498210084853797453949193117835061402537058150493808371384063278793041752943930928932275052745657700368980150842377283198946138726219378646040515809994704174471793592322237777371900834531014326150160506449286179]</span><br><span class="line">E = [229904181453273080302209653709086531153804577507365859149808244958841045687064628362978517491609413507875726243121473678430010600891588643092042173698830147997497783886459583186019270582236955524620567373560535686287255124958954671737097645556109314142383275516997850786599322033792080045303427363366927030304214333894247469120513426641296678531965795930756543043851154646310114366477311633838078242963665452936523438928643273392454483600446242320078010627755587492056369779661382734170244060951095344418599686788550312205964136120979823565225768814898285224838691541122088693411388097496320157113230752327025862802020421665288007529320920942060329299409362236414929126050037144149017275031336018100081931062647888329912802477032857776085190828105602067426203163344931483638271679183910241511044338001446584634203146294743522375846913845041274967653508735863706778364499099286484552570083394223973734909997825522191349543295855925973354640349809770822075226834555111927586299176453943116511915434890643239957459427390624136283086434711471863737451011157026905191204496081860277138227247744470804087252965368757930797560277881668806206419629425126031049566579233056222579590529869798537893505779097868221221068867624660759084762471141, 374749619911728044650812367560174497001343067563440477135516664935394734686391543012901514676044211541958613458868769659861216149364768233000844624035620893309356372294598009760824255187442531508754966566917198975934706398309982525100772311586501118200858124845012643495006029930202324305874402291277845166060497038915773767003006049720519011634861166208163030159519901867416488082395270295488885724507937683469910251316231210838654273986152493722244271430422693265608430755620420680629979226285393465423870727975987787149515374769359243334743541460110042872587610309611770320600248289328406805995688596910226273861759369388105641549933915686192055533242723330981192183310876306968103333706140401422550917946410378174896274789619184565321544130428008804628699594759946577979319393247067750024729672029363433673084437510430506410293512293930056667971242862448029841846596288648691077795207341975907335202945548990662460491169957175452745622341245617265849042542964819126377775749222973138584978725470886059043251544634105653274564085280013340679259157119014619894553239015777411757887293044706448625760604242512494466386343040583010961386979963779928616733980046763291988848903515836247301007113187121999960487508948748354549628160741, 111738429639840672983162926852338651562094139707285850255632987705635459657893186493838711733560515475806567653354737245246745810892238414756414117557971683747269900627524702653772058841085258035513296218047505149691384287812041721130367506731427022265277885965948486359682023555050085264531256406043361391744086539522028829421284667293339869140564699750714145488199268791908205712660933607330454849730499840287271163350865799682565216636393526339218836244889719975150503253630419647851422620890082315396457329065508602521784001607236788620811397449483104884860551374031790663030220424841642241965983726516537123807061999084476076850833658360594525986997125319941689903869138176347916707622148840226672408554102717625456819726220575710494929111642866840516339713870850732638906870325693572445316904688582043485093120585767903009745325497085286577015692005747499504730575062998090846463157669448943725039951120963375521054164657547731579771203443617489609201617736584055562887243883898406182052632245189418568410854530995044542628531851356363297989653392057214167031332353949367816700838296651167799441279086074308299608106786918676697564002641234952760724731325383088682051108589283162705846714876543662335188222683115878319143239781, 185935167438248768027713217055147583431480103445262049361952417166499278728434926508937684304985810617277398880507451351333771783039360671467147075085417403764439214700549777320094501151755362122677245586884124615115132430034242191429064710012407308619977881929109092467325180864745257810774684549914888829203014922855369708286801194645263982661023515570231007900615244109762444081806466412714045462184361892356485713147687194230341085490571821445962465385514845915484336766973332384198790601633964078447446832581798146300515184339036127604597014458389481920870330726947546808739829589808006774479656385317205167932706748974482578749055876192429032258189528408353619365693624106394913101463023497175917598944803733849984703912670992613579847331081015979121834040110652608301633876167262248103403520536210279949844194696898862249482809107840303473964914083996538912970715834110371196970613332286296427286356036576876121010776933023901744994067564045429384172315640135483480089769992730928266885675143187679290648773060781987273082229827156531141515679114580622348238382074084270808291251400949744720804368426414308355267344210055608246286737478682527960260877955900464059404976906697164610891962198768354924180929300959036213841843941]</span><br><span class="line"></span><br><span class="line">M = 2^1000  </span><br><span class="line">L = Matrix(ZZ, [</span><br><span class="line">    [M, E[0], E[1], E[2], E[3]],</span><br><span class="line">    [0, -N[0]^2, 0, 0, 0],</span><br><span class="line">    [0, 0, -N[1]^2, 0, 0],</span><br><span class="line">    [0, 0, 0, -N[2]^2, 0],</span><br><span class="line">    [0, 0, 0, 0, -N[3]^2],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">L = L.LLL()</span><br><span class="line">for row in L:</span><br><span class="line">    if row[0] % M == 0:</span><br><span class="line">        d = abs(row[0] // M)</span><br><span class="line">        if 1 &lt; d &lt; 2^800: </span><br><span class="line">            print(&quot;Found d:&quot;, d)</span><br><span class="line">            flag = &quot;palu&#123;&quot; + hashlib.md5(str(d).encode()).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h2 id="循环锁链"><a href="#循环锁链" class="headerlink" title="循环锁链"></a>循环锁链</h2><p>这纯脑洞题，一开始傻了忘了flag头是palu，想到是循环异或了用flag试了一辈子也没试出来，加密逻辑很简单，就是第一位明文和第二位明文异或当作第一位密文，然后依次重复这个过程，最后一位明文和第一位明文异或是最后一位密文，根据已知的明文palu推回去即可：</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#python</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def decrypt(c: bytes, prefix: bytes) -&gt; bytes:</span><br><span class="line">    N = len(c)</span><br><span class="line">    p = bytearray(N)</span><br><span class="line">    L = len(prefix)</span><br><span class="line">    p[:L] = prefix</span><br><span class="line">    for i in range(N - 1):</span><br><span class="line">        if i + 1 &gt;= L:</span><br><span class="line">            p[i + 1] = c[i] ^ p[i]</span><br><span class="line">    return bytes(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with open(&#x27;flag.enc&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">    ciphertext = f.read()</span><br><span class="line">    known_prefix = b&quot;palu&#123;&quot;</span><br><span class="line">    plaintext = decrypt(ciphertext, known_prefix)</span><br><span class="line">    flag = plaintext.decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="星际广播站"><a href="#星际广播站" class="headerlink" title="星际广播站"></a>星际广播站</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是使用flask框架编写的RSA广播的空间站系统，你有办法登录并解密密文吗</span><br></pre></td></tr></table></figure><p>说实话一打开是一个web界面看傻了，查看源码发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function downloadAppFile(filename) &#123;</span><br><span class="line">          const iframe = document.createElement(&#x27;iframe&#x27;);</span><br><span class="line">          iframe.style.display = &#x27;none&#x27;;</span><br><span class="line">          document.body.appendChild(iframe);</span><br><span class="line">          const downloadUrl = `/file/download?path=$&#123;encodeURIComponent(filename)&#125;`;</span><br><span class="line">          iframe.src = downloadUrl;</span><br><span class="line">          </span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">          document.body.removeChild(iframe);</span><br><span class="line">          &#125;, 2000);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>很明显的任意文件下载漏洞，由于这是使用flask框架编写的，所以下载一下app.py文件看看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downloadAppFile(&quot;app.py&quot;);</span><br></pre></td></tr></table></figure><p>app.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">from flask import Flask, render_template, request, redirect, url_for, session, flash, g,send_file, abort</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">from Crypto.Util.number import bytes_to_long, getPrime</span><br><span class="line">import string</span><br><span class="line">from secret import flag    </span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.urandom(24) # 用于 session 管理</span><br><span class="line"></span><br><span class="line"># 修改数据库路径</span><br><span class="line"># Ensure this line points to the data directory</span><br><span class="line">DATABASE = &#x27;data/users.db&#x27;</span><br><span class="line">E = getPrime(7)</span><br><span class="line">NUM_USERS = 128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># assert NUM_USERS &gt;= E </span><br><span class="line">print(f&quot;E: &#123;E&#125;&quot;)</span><br><span class="line">FLAG = flag.encode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">def get_db():</span><br><span class="line">    db = getattr(g, &#x27;_database&#x27;, None)</span><br><span class="line">    if db is None:</span><br><span class="line">        # Ensure the directory exists when connecting</span><br><span class="line">        db_dir = os.path.dirname(DATABASE)</span><br><span class="line">        if not os.path.exists(db_dir):</span><br><span class="line">             os.makedirs(db_dir, exist_ok=True)</span><br><span class="line">        db = g._database = sqlite3.connect(DATABASE)</span><br><span class="line">        db.row_factory = sqlite3.Row # 让查询结果可以通过列名访问</span><br><span class="line">    return db</span><br><span class="line"></span><br><span class="line">@app.teardown_appcontext</span><br><span class="line">def close_connection(exception):</span><br><span class="line">    db = getattr(g, &#x27;_database&#x27;, None)</span><br><span class="line">    if db is not None:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line">from gmssl import sm3, func </span><br><span class="line"></span><br><span class="line">def sm3_hash(data):</span><br><span class="line">    &quot;&quot;&quot;计算数据的 SM3 哈希值&quot;&quot;&quot;</span><br><span class="line">    if isinstance(data, str):</span><br><span class="line">        data = data.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    hash_bytes = sm3.sm3_hash(func.bytes_to_list(data))</span><br><span class="line">    print(f&quot;计算 &#123;data&#125; 的 SM3 哈希值为: &#123;hash_bytes&#125;&quot;)</span><br><span class="line">    return hash_bytes</span><br><span class="line"></span><br><span class="line">def generate_rsa_pair(message, e):</span><br><span class="line">    &quot;&quot;&quot;生成 RSA 公钥 N 和对应的密文 C&quot;&quot;&quot;</span><br><span class="line">    key = RSA.generate(1024)</span><br><span class="line">    n = key.n</span><br><span class="line">    m_long = bytes_to_long(message)</span><br><span class="line">    c = pow(m_long, e, n)</span><br><span class="line">    return n, c</span><br><span class="line"></span><br><span class="line">def init_db():</span><br><span class="line">    &quot;&quot;&quot;初始化数据库，创建表并填充用户数据&quot;&quot;&quot;</span><br><span class="line">    db_path = os.path.join(&#x27;/app&#x27;, DATABASE) # 在容器内的绝对路径</span><br><span class="line">    db_dir = os.path.dirname(db_path)</span><br><span class="line">    os.makedirs(db_dir, exist_ok=True) # 确保容器内的目录存在</span><br><span class="line"></span><br><span class="line">    # 检查数据库文件是否存在于容器内的预期路径</span><br><span class="line">    if os.path.exists(db_path):</span><br><span class="line">         print(f&quot;数据库文件 &#123;db_path&#125; 已存在，跳过初始化。&quot;)</span><br><span class="line">         # 即使文件存在，也要确保表结构是最新的</span><br><span class="line">         # 可以考虑在这里添加检查表是否存在的逻辑，如果不存在则创建</span><br><span class="line">         # return # 如果确定存在就跳过，否则继续执行建表逻辑</span><br><span class="line"></span><br><span class="line">    print(f&quot;初始化数据库 &#123;db_path&#125;...&quot;)</span><br><span class="line">    with app.app_context():</span><br><span class="line">        db = get_db()</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        # 检查 users 表是否存在</span><br><span class="line">        cursor.execute(&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27; AND name=&#x27;users&#x27;;&quot;)</span><br><span class="line">        table_exists = cursor.fetchone()</span><br><span class="line"></span><br><span class="line">        if not table_exists:</span><br><span class="line">            print(&quot;创建 users 表...&quot;)</span><br><span class="line">            cursor.execute(&#x27;&#x27;&#x27;</span><br><span class="line">                CREATE TABLE users (</span><br><span class="line">                    id INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">                    username TEXT UNIQUE NOT NULL,</span><br><span class="line">                    password_hash TEXT NOT NULL,</span><br><span class="line">                    n TEXT NOT NULL -- 存储大整数 N</span><br><span class="line">                )</span><br><span class="line">            &#x27;&#x27;&#x27;)</span><br><span class="line">            db.commit() # 提交建表操作</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;users 表已存在。&quot;)</span><br><span class="line">            # 检查是否需要填充数据</span><br><span class="line">            cursor.execute(&quot;SELECT COUNT(*) FROM users&quot;)</span><br><span class="line">            user_count = cursor.fetchone()[0]</span><br><span class="line">            if user_count &gt;= NUM_USERS:</span><br><span class="line">                print(f&quot;数据库中已有 &#123;user_count&#125; 个用户，跳过填充。&quot;)</span><br><span class="line">                return # 如果用户数量足够，则跳过填充</span><br><span class="line"></span><br><span class="line">        # --- 填充用户数据的逻辑 ---</span><br><span class="line">        print(&quot;开始填充用户数据...&quot;)</span><br><span class="line">        generated_n_set = set()</span><br><span class="line">        # 获取当前数据库中的用户数量</span><br><span class="line">        cursor.execute(&quot;SELECT COUNT(*) FROM users&quot;)</span><br><span class="line">        current_user_count = cursor.fetchone()[0]</span><br><span class="line">        users_added_this_run = 0</span><br><span class="line"></span><br><span class="line">        # 从 current_user_count + 1 开始生成用户，直到达到 NUM_USERS</span><br><span class="line">        for i in range(current_user_count, NUM_USERS):</span><br><span class="line">            username = str(i + 1)</span><br><span class="line">            random.seed(username)</span><br><span class="line"></span><br><span class="line">            characters = string.ascii_letters + string.digits</span><br><span class="line">            password = &quot;&quot;.join(random.choices(characters, k=6))</span><br><span class="line">            password_hash = sm3_hash(password)</span><br><span class="line"></span><br><span class="line">            n, c = None, None</span><br><span class="line">            attempts = 0</span><br><span class="line">            max_attempts = NUM_USERS * 5</span><br><span class="line">            while attempts &lt; max_attempts:</span><br><span class="line">                n_candidate, c_candidate = generate_rsa_pair(FLAG, E)</span><br><span class="line">                if n_candidate not in generated_n_set:</span><br><span class="line">                    # 还需要检查数据库中是否已存在此 N</span><br><span class="line">                    cursor.execute(&quot;SELECT 1 FROM users WHERE n = ?&quot;, (str(n_candidate),))</span><br><span class="line">                    n_exists_in_db = cursor.fetchone()</span><br><span class="line">                    if not n_exists_in_db:</span><br><span class="line">                        n = n_candidate</span><br><span class="line">                        c = c_candidate</span><br><span class="line">                        generated_n_set.add(n)</span><br><span class="line">                        break</span><br><span class="line">                attempts += 1</span><br><span class="line"></span><br><span class="line">            if n is None:</span><br><span class="line">                print(f&quot;警告：无法为用户 &#123;username&#125; 生成唯一的 N，已尝试 &#123;max_attempts&#125; 次。&quot;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                cursor.execute(&quot;INSERT INTO users (username, password_hash, n) VALUES (?, ?, ?)&quot;,</span><br><span class="line">                               (username, password_hash, str(n)))</span><br><span class="line">                users_added_this_run += 1</span><br><span class="line">                print(f&quot;添加用户 &#123;username&#125; 到数据库。&quot;)</span><br><span class="line">            except sqlite3.IntegrityError:</span><br><span class="line">                print(f&quot;用户名 &#123;username&#125; 已存在或 N 值冲突，跳过。&quot;)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;添加用户 &#123;username&#125; 时出错: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        db.commit()</span><br><span class="line">        print(f&quot;数据库初始化/填充完成，本次运行添加了 &#123;users_added_this_run&#125; 个用户。&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    if &#x27;username&#x27; in session:</span><br><span class="line">        return redirect(url_for(&#x27;dashboard&#x27;))</span><br><span class="line">    return render_template(&#x27;index.html&#x27;) </span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        username = request.form[&#x27;username&#x27;]</span><br><span class="line">        password_hash_attempt = sm3_hash(request.form[&#x27;password_hash&#x27;])</span><br><span class="line">        db = get_db()</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        cursor.execute(&quot;SELECT password_hash FROM users WHERE username = ?&quot;, (username,))</span><br><span class="line">        user = cursor.fetchone()</span><br><span class="line"></span><br><span class="line">        if  user and user[&#x27;password_hash&#x27;] == password_hash_attempt:</span><br><span class="line">            session[&#x27;username&#x27;] = username</span><br><span class="line">            flash(&#x27;登录成功！&#x27;, &#x27;success&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;dashboard&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            flash(&#x27;无效的用户名或密码。&#x27;, &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;login&#x27;)) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    if &#x27;username&#x27; in session:</span><br><span class="line">        return redirect(url_for(&#x27;dashboard&#x27;)) </span><br><span class="line">    return render_template(&#x27;index.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/dashboard&#x27;)</span><br><span class="line">def dashboard():</span><br><span class="line">    if &#x27;username&#x27; not in session:</span><br><span class="line">        flash(&#x27;请先登录。&#x27;, &#x27;error&#x27;)</span><br><span class="line">        return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">    username = session[&#x27;username&#x27;]</span><br><span class="line">    db = get_db()</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    cursor.execute(&quot;SELECT n  FROM users WHERE username = ?&quot;, (username,))</span><br><span class="line">    user_data = cursor.fetchone()</span><br><span class="line"></span><br><span class="line">    if not user_data:</span><br><span class="line">        # 用户在 session 中但数据库中找不到？异常情况</span><br><span class="line">        session.pop(&#x27;username&#x27;, None)</span><br><span class="line">        flash(&#x27;发生错误，请重新登录。&#x27;, &#x27;error&#x27;)</span><br><span class="line">        return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">    n = user_data[&#x27;n&#x27;]</span><br><span class="line">#     c = user_data[&#x27;c&#x27;]</span><br><span class="line">    m = bytes_to_long(FLAG)</span><br><span class="line">    c = str(pow(m, E, int(n)))</span><br><span class="line">    return render_template(&#x27;dashboard.html&#x27;, username=username, n=n, c=c, e=E)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/logout&#x27;)</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&#x27;username&#x27;, None)</span><br><span class="line">    flash(&#x27;您已成功登出。&#x27;, &#x27;success&#x27;)</span><br><span class="line">    return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/file/download&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def download_file():</span><br><span class="line">    path = request.args.get(&#x27;path&#x27;, &#x27;&#x27;)</span><br><span class="line">    </span><br><span class="line">    if not path:</span><br><span class="line">        return &quot;Error: No path parameter provided&quot;, 400</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line"></span><br><span class="line">        if not os.path.isabs(path):</span><br><span class="line">            path = os.path.join(os.path.dirname(__file__), path)</span><br><span class="line">        </span><br><span class="line">        if not os.path.exists(path) or not os.path.isfile(path):</span><br><span class="line">            return f&quot;Error: File not found: &#123;path&#125;&quot;, 404</span><br><span class="line"></span><br><span class="line">        return send_file(</span><br><span class="line">            path,</span><br><span class="line">            as_attachment=True,</span><br><span class="line">            download_name=os.path.basename(path),</span><br><span class="line">            mimetype=&#x27;application/octet-stream&#x27;</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    except Exception as e:</span><br><span class="line">        return f&quot;Error: &#123;str(e)&#125;&quot;, 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    init_db() # 启动时检查并初始化数据库</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=8000, debug=True)</span><br></pre></td></tr></table></figure><p>我们观察到有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATABASE = &#x27;data/users.db&#x27;</span><br></pre></td></tr></table></figure><p>和<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username = str(i + 1)</span><br><span class="line">            random.seed(username)</span><br><span class="line"></span><br><span class="line">            characters = string.ascii_letters + string.digits</span><br><span class="line">            password = &quot;&quot;.join(random.choices(characters, k=6))</span><br></pre></td></tr></table></figure><br>这里我们知道了数据库文件的位置可以获取到数据库文件，并且发现密码是由用户名作为种子使用random函数得来的，那么用户名固定密码就固定，这里我们就已知了密码。<br>下一下数据库文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downloadAppFile(&quot;data/users.db&quot;); </span><br></pre></td></tr></table></figure><p>登录一下获取到了e为71，现在要做的就是读取数据库获取所有的n，登录e个用户获取到e个c进行低加密指数广播攻击即可</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import sqlite3</span><br><span class="line">from typing import Dict, List, Tuple</span><br><span class="line">from gmpy2 import iroot, invert</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_password(username: str) -&gt; str:</span><br><span class="line">    &quot;&quot;&quot;根据用户名生成密码&quot;&quot;&quot;</span><br><span class="line">    random.seed(username)</span><br><span class="line">    characters = string.ascii_letters + string.digits</span><br><span class="line">    return &#x27;&#x27;.join(random.choices(characters, k=6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_all_n_from_db(db_path: str) -&gt; Dict[str, int]:</span><br><span class="line">    &quot;&quot;&quot;从本地数据库获取所有用户的n值&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        with sqlite3.connect(db_path) as conn:</span><br><span class="line">            cursor = conn.cursor()</span><br><span class="line">            cursor.execute(&quot;SELECT username, n FROM users&quot;)</span><br><span class="line">            return &#123;row[0]: int(row[1]) for row in cursor.fetchall()&#125;</span><br><span class="line">    except sqlite3.Error as e:</span><br><span class="line">        print(f&quot;数据库错误: &#123;e&#125;&quot;)</span><br><span class="line">        return &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def collect_c_values(users: Dict[str, int], base_url: str) -&gt; Dict[int, int]:</span><br><span class="line">    &quot;&quot;&quot;通过HTTP请求收集c值&quot;&quot;&quot;</span><br><span class="line">    c_data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    for username, n in users.items():</span><br><span class="line">        password = generate_password(username)</span><br><span class="line">        session = requests.Session()</span><br><span class="line"></span><br><span class="line">        # 登录获取session</span><br><span class="line">        try:</span><br><span class="line">            login_resp = session.post(</span><br><span class="line">                f&quot;&#123;base_url&#125;/login&quot;,</span><br><span class="line">                data=&#123;&quot;username&quot;: username, &quot;password_hash&quot;: password&#125;,</span><br><span class="line">                allow_redirects=False,</span><br><span class="line">                timeout=5</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            if login_resp.status_code != 302 or &#x27;dashboard&#x27; not in login_resp.headers.get(&#x27;Location&#x27;, &#x27;&#x27;):</span><br><span class="line">                print(f&quot;[!] 用户 &#123;username&#125; 登录失败&quot;)</span><br><span class="line">                continue</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;[!] 用户 &#123;username&#125; 登录请求异常: &#123;str(e)&#125;&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        # 获取dashboard页面</span><br><span class="line">        try:</span><br><span class="line">            dashboard_resp = session.get(f&quot;&#123;base_url&#125;/dashboard&quot;, timeout=5)</span><br><span class="line">            if dashboard_resp.status_code != 200:</span><br><span class="line">                print(f&quot;[!] 用户 &#123;username&#125; 访问dashboard失败&quot;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            # 精确匹配c值</span><br><span class="line">            c_match = re.search(r&#x27;&lt;span class=&quot;data-value&quot;&gt;(\d+)&lt;/span&gt;&#x27;, dashboard_resp.text)</span><br><span class="line">            if c_match:</span><br><span class="line">                c_data[n] = int(c_match.group(1))</span><br><span class="line">                print(f&quot;[+] 成功获取用户 &#123;username&#125; 的 c=&#123;c_data[n]&#125;&quot;)</span><br><span class="line">            else:</span><br><span class="line">                print(f&quot;[!] 用户 &#123;username&#125; 的c值解析失败&quot;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;[!] 用户 &#123;username&#125; 请求异常: &#123;str(e)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    return c_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def chinese_remainder_theorem(moduli: List[int], residues: List[int]) -&gt; int:</span><br><span class="line">    &quot;&quot;&quot;实现中国剩余定理&quot;&quot;&quot;</span><br><span class="line">    total = 0</span><br><span class="line">    product = 1</span><br><span class="line"></span><br><span class="line">    for m in moduli:</span><br><span class="line">        product *= m</span><br><span class="line"></span><br><span class="line">    for m, r in zip(moduli, residues):</span><br><span class="line">        p = product // m</span><br><span class="line">        total += r * invert(p, m) * p</span><br><span class="line"></span><br><span class="line">    return total % product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 从本地数据库获取所有n值</span><br><span class="line">    print(&quot;[+] 正在从本地数据库读取n值...&quot;)</span><br><span class="line">    all_users = get_all_n_from_db(&#x27;users.db&#x27;)</span><br><span class="line">    print(f&quot;[+] 成功读取 &#123;len(all_users)&#125; 个用户的n值&quot;)</span><br><span class="line"></span><br><span class="line">    # 收集c值</span><br><span class="line">    e = 71</span><br><span class="line">    URL = &#x27;http://challenge.qsnctf.com:32237&#x27;  # 修复了URL中的空格</span><br><span class="line">    print(f&quot;[+] 开始收集 &#123;e&#125; 个用户的c值...&quot;)</span><br><span class="line"></span><br><span class="line">    c_data = collect_c_values(all_users, URL)</span><br><span class="line"></span><br><span class="line">    if len(c_data) &lt; e:</span><br><span class="line">        print(f&quot;[!] 警告：只收集到 &#123;len(c_data)&#125; 个c值，需要至少 &#123;e&#125; 个&quot;)</span><br><span class="line"></span><br><span class="line">    n_list = list(c_data.keys())[:e]</span><br><span class="line">    c_list = [c_data[n] for n in n_list]</span><br><span class="line"></span><br><span class="line">    print(&quot;[+] 开始解密流程...&quot;)</span><br><span class="line">    M = chinese_remainder_theorem(n_list, c_list)</span><br><span class="line">    m = iroot(M, e)[0]</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><h2 id="轮回密码"><a href="#轮回密码" class="headerlink" title="轮回密码"></a>轮回密码</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在佛经残卷中发现神秘密文，据传加密者用&quot;六道轮回&quot;之法将真言藏于时空循环中。</span><br></pre></td></tr></table></figure><p>encode.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def samsara_encrypt(text, key_word):</span><br><span class="line">    cycle_step = len(key_word) % 6 + 1</span><br><span class="line"></span><br><span class="line">    phase1 = bytes([(c &gt;&gt; cycle_step) | ((c &lt;&lt; (8 - cycle_step)) &amp; 0xFF) for c in text])</span><br><span class="line"></span><br><span class="line">    phase2 = base64.b85encode(phase1)</span><br><span class="line"></span><br><span class="line">    phase3 = bytes([(c &gt;&gt; cycle_step) | ((c &lt;&lt; (8 - cycle_step)) &amp; 0xFF) for c in phase2])</span><br><span class="line"></span><br><span class="line">    return bytes([phase3[i] ^ key_word[i % len(key_word)] for i in range(len(phase3))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    flag = b&quot;palu&#123;********&#125;&quot;  # 可替换flag</span><br><span class="line">    key = b&quot;&quot;</span><br><span class="line">    cipher = samsara_encrypt(flag, key)</span><br><span class="line"></span><br><span class="line">    # 修复点：使用latin-1编码处理二进制数据</span><br><span class="line">    print(&quot;轮回密文:&quot;, cipher.decode(&#x27;latin-1&#x27;))  # 输出示例：¨×èÄÅÉØÛÚ</span><br></pre></td></tr></table></figure><p>flag.txt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">轮回密文: y¦_6&gt;X¬y!,!n¡mSaÜñüë9¼6</span><br></pre></td></tr></table></figure><p>对着逆向就行了，直接问ai都可以<br>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def samsara_decrypt(cipher_text, key_word):</span><br><span class="line">    # 步骤1: 与关键词异或</span><br><span class="line">    step1 = bytes([cipher_text[i] ^ key_word[i % len(key_word)] for i in range(len(cipher_text))])</span><br><span class="line"></span><br><span class="line">    # 计算循环位移量</span><br><span class="line">    cycle_step = len(key_word) % 6 + 1</span><br><span class="line"></span><br><span class="line">    # 步骤2: 逆向循环右移（即循环左移cycle_step位）</span><br><span class="line">    step2 = bytes([((c &lt;&lt; cycle_step) | (c &gt;&gt; (8 - cycle_step))) &amp; 0xFF for c in step1])</span><br><span class="line"></span><br><span class="line">    # 步骤3: Base85解码</span><br><span class="line">    step3 = base64.b85decode(step2)</span><br><span class="line"></span><br><span class="line">    # 步骤4: 再次逆向循环右移（即循环左移cycle_step位）</span><br><span class="line">    return bytes([((c &lt;&lt; cycle_step) | (c &gt;&gt; (8 - cycle_step))) &amp; 0xFF for c in step3])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 密文和密钥</span><br><span class="line">    cipher_text = &quot;y¦_6&gt;X¬y!,!n¡mSaÜñüë9¼6&quot;.encode(&#x27;latin-1&#x27;)</span><br><span class="line">    key_word = b&quot;Bore&quot;  # 需要填入正确的密钥</span><br><span class="line"></span><br><span class="line">    # 解密</span><br><span class="line">    plain_text = samsara_decrypt(cipher_text, key_word)</span><br><span class="line">    print(&quot;解密结果:&quot;, plain_text.decode(&#x27;utf-8&#x27;, errors=&#x27;replace&#x27;))</span><br><span class="line"></span><br><span class="line"># palu&#123;reincarnation_cipher&#125;</span><br></pre></td></tr></table></figure><h2 id="文件查看器"><a href="#文件查看器" class="headerlink" title="文件查看器*"></a>文件查看器*</h2><p>app.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template, request, redirect, url_for, session, flash, send_from_directory, make_response</span><br><span class="line">import os</span><br><span class="line">from gmssl import sm4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xor(byte1, byte2):</span><br><span class="line">    result = bytes(x ^ y for x, y in zip(byte1, byte2))</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = os.urandom(16)</span><br><span class="line">iv = os.urandom(16)</span><br><span class="line">sm4_encryption = sm4.CryptSM4()</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=&#x27;templates&#x27;, static_folder=&#x27;static&#x27;)</span><br><span class="line">app.secret_key = b&#x27;palupalupalupalupalupalupalupalupalu&#x27; </span><br><span class="line"># 保留原始的用户数据访问对象 (DAO)</span><br><span class="line">class UserDAO(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.users: dict[str, str] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def getPassword(self, uid: str) -&gt; str:</span><br><span class="line">        if uid not in self.users:</span><br><span class="line">            raise Exception(&#x27;用户不存在&#x27;)</span><br><span class="line">        return self.users[uid]</span><br><span class="line"></span><br><span class="line">    def create(self, uid: str, password: str):</span><br><span class="line">        if uid in self.users:</span><br><span class="line">            raise Exception(&#x27;用户已注册&#x27;)</span><br><span class="line">        self.users[uid] = password</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">DAO = UserDAO()</span><br><span class="line">DAO.create(&#x27;demoUser&#x27;, &#x27;123456&#x27;)</span><br><span class="line"></span><br><span class="line"># --- Flask 路由 --- </span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    if &#x27;uid&#x27; in session:</span><br><span class="line">        return redirect(url_for(&#x27;profile&#x27;))</span><br><span class="line">    return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/register&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def register():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        uid = request.form.get(&#x27;uid&#x27;)</span><br><span class="line">        if &#x27;admin&#x27; in uid:</span><br><span class="line">            flash(&#x27;不可以是admin哦&#x27;, &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;register&#x27;))</span><br><span class="line">        password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">        confirm_password = request.form.get(&#x27;confirm_password&#x27;)</span><br><span class="line"></span><br><span class="line">        if not uid or not password:</span><br><span class="line">            flash(&#x27;用户ID和密码不可为空&#x27;, &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;register&#x27;))</span><br><span class="line"></span><br><span class="line">        if password != confirm_password:</span><br><span class="line">            flash(&#x27;两次输入的密码不一致&#x27;, &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;register&#x27;))</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            DAO.create(uid, password)</span><br><span class="line">            flash(&#x27;注册成功，请登录&#x27;, &#x27;success&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line">        except Exception as e:</span><br><span class="line">            flash(str(e.args[0]), &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;register&#x27;))</span><br><span class="line"></span><br><span class="line">    return render_template(&#x27;register.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        uid = request.form.get(&#x27;uid&#x27;)</span><br><span class="line">        password = request.form.get(&#x27;password&#x27;)</span><br><span class="line"></span><br><span class="line">        if not uid or not password:</span><br><span class="line">            flash(&#x27;用户ID和密码不可为空&#x27;, &#x27;error&#x27;)</span><br><span class="line">            return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            stored_password = DAO.getPassword(uid)</span><br><span class="line">            if stored_password != password:</span><br><span class="line">                raise Exception(&#x27;用户ID或密码错误&#x27;)</span><br><span class="line"></span><br><span class="line">            user_level = &#x27;admin&#x27; if uid == &#x27;admin&#x27; else &#x27;guest&#x27;</span><br><span class="line">            </span><br><span class="line">            sm4_encryption.set_key(key, sm4.SM4_ENCRYPT)</span><br><span class="line">            token_payload = f&quot;&#123;uid&#125;:&#123;user_level&#125;&quot;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">            token = sm4_encryption.crypt_cbc(iv, token_payload).hex()</span><br><span class="line"></span><br><span class="line">            session[&#x27;uid&#x27;] = uid</span><br><span class="line">            flash(f&#x27;登录成功，您的 token 是: &#123;token&#125;&#x27;, &#x27;success&#x27;)</span><br><span class="line">            # 创建响应对象并设置 cookie</span><br><span class="line">            response = make_response(redirect(url_for(&#x27;profile&#x27;)))</span><br><span class="line">            response.set_cookie(&#x27;auth_token&#x27;, token, httponly=True, samesite=&#x27;Lax&#x27;) # 设置 cookie</span><br><span class="line">            return response</span><br><span class="line"></span><br><span class="line">        except Exception as e:</span><br><span class="line">            flash(str(e.args[0]), &#x27;error&#x27;) # 显示更具体的错误信息</span><br><span class="line">            return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">    return render_template(&#x27;login.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/profile&#x27;)</span><br><span class="line">def profile():</span><br><span class="line">    if &#x27;uid&#x27; not in session:</span><br><span class="line">        return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line">    </span><br><span class="line">    # 可以在这里添加解密 token 显示信息的逻辑，但暂时只显示用户名</span><br><span class="line">    username = session.get(&#x27;uid&#x27;)</span><br><span class="line">    return render_template(&#x27;profile.html&#x27;, username=username)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/logout&#x27;)</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&#x27;uid&#x27;, None)</span><br><span class="line">    flash(&#x27;您已成功登出&#x27;, &#x27;info&#x27;)</span><br><span class="line">    return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/file&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def read_file_page():</span><br><span class="line">    if &#x27;uid&#x27; not in session :</span><br><span class="line">        flash(&#x27;请先登录&#x27;, &#x27;warning&#x27;)</span><br><span class="line">        return redirect(url_for(&#x27;login&#x27;))</span><br><span class="line">    print(session)</span><br><span class="line">    </span><br><span class="line">    file_content = None</span><br><span class="line">    error_message = None</span><br><span class="line">    file_path_requested = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        token = request.cookies.get(&#x27;auth_token&#x27;) # 从 cookie 获取 token</span><br><span class="line">        file_path = request.form.get(&#x27;path&#x27;)</span><br><span class="line">        file_path_requested = file_path # 保留用户输入的路径以便回显</span><br><span class="line">        if not file_path:</span><br><span class="line">            error_message = &#x27;路径不可为空&#x27;</span><br><span class="line">        else:</span><br><span class="line">            try:</span><br><span class="line">                # 保留原始的 SM4 CBC 令牌验证逻辑</span><br><span class="line">                sm4_encryption.set_key(key, sm4.SM4_DECRYPT)</span><br><span class="line">                token_decrypted = sm4_encryption.crypt_cbc(iv, bytes.fromhex(token))</span><br><span class="line">                decrypted_str = token_decrypted.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;) </span><br><span class="line">                parts = decrypted_str.split(&#x27;:&#x27;)[-2:]</span><br><span class="line"></span><br><span class="line">                uid_from_token, lv = parts</span><br><span class="line"></span><br><span class="line">                if &#x27;admin&#x27; in lv:</span><br><span class="line">                    print(f&quot;管理员 &#123;uid_from_token&#125; 尝试读取: &#123;file_path&#125;&quot;)</span><br><span class="line">                    try:</span><br><span class="line"></span><br><span class="line">                        with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">                            file_content = f.read()</span><br><span class="line">                    except FileNotFoundError:</span><br><span class="line">                        error_message = &#x27;文件未找到&#x27;</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print(f&quot;读取文件错误: &#123;e&#125;&quot;)</span><br><span class="line">                        error_message = &#x27;读取文件失败&#x27;</span><br><span class="line">                else:</span><br><span class="line">                    error_message = &#x27;非管理员，无权限读取服务器文件&#x27;</span><br><span class="line">            except ValueError as e:</span><br><span class="line">                 error_message = f&#x27;token非法: &#123;e&#125;&#x27;</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;Token 解密/验证错误: &#123;e&#125;&quot;)</span><br><span class="line">                error_message = &#x27;token无效或已过期&#x27;</span><br><span class="line"></span><br><span class="line">    if error_message:</span><br><span class="line">        flash(error_message, &#x27;error&#x27;)</span><br><span class="line">        </span><br><span class="line">    return render_template(&#x27;file_viewer.html&#x27;, file_content=file_content, file_path_requested=file_path_requested)</span><br><span class="line"></span><br><span class="line"># 移除 Flask-RESTX 的 404 处理，使用 Flask 默认或自定义模板</span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(e):</span><br><span class="line">    # 可以创建一个 templates/404.html 页面</span><br><span class="line">    return render_template(&#x27;404.html&#x27;), 404 </span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 确保 static 文件夹存在</span><br><span class="line">    if not os.path.exists(&#x27;static&#x27;):</span><br><span class="line">        os.makedirs(&#x27;static&#x27;)</span><br><span class="line">    # 确保 templates 文件夹存在</span><br><span class="line">    if not os.path.exists(&#x27;templates&#x27;):</span><br><span class="line">        os.makedirs(&#x27;templates&#x27;)</span><br><span class="line">    # 404 页面</span><br><span class="line">    if not os.path.exists(&#x27;templates/404.html&#x27;):</span><br><span class="line">        with open(&#x27;templates/404.html&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">            f.write(&#x27;&lt;!doctype html&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;h1&gt;页面未找到&lt;/h1&gt;&lt;p&gt;您访问的页面不存在。&lt;/p&gt;&lt;a href=&quot;/&quot;&gt;返回首页&lt;/a&gt;&#x27;)</span><br><span class="line"></span><br><span class="line">    if not os.path.exists(&#x27;static/style.css&#x27;):</span><br><span class="line">         with open(&#x27;static/style.css&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">            f.write(&#x27;&#x27;&#x27;</span><br><span class="line">body &#123; font-family: sans-serif; margin: 20px; background-color: #f4f4f4; &#125;</span><br><span class="line">.container &#123; max-width: 600px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); &#125;</span><br><span class="line">h1 &#123; color: #333; &#125;</span><br><span class="line">.form-group &#123; margin-bottom: 15px; &#125;</span><br><span class="line">label &#123; display: block; margin-bottom: 5px; &#125;</span><br><span class="line">input[type=&quot;text&quot;], input[type=&quot;password&quot;] &#123; width: calc(100% - 22px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; &#125;</span><br><span class="line">button &#123; background-color: #5cb85c; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; &#125;</span><br><span class="line">button:hover &#123; background-color: #4cae4c; &#125;</span><br><span class="line">a &#123; color: #0275d8; text-decoration: none; &#125;</span><br><span class="line">a:hover &#123; text-decoration: underline; &#125;</span><br><span class="line">.flash-messages &#123; margin-bottom: 15px; &#125;</span><br><span class="line">.alert &#123; padding: 10px; border-radius: 4px; margin-bottom: 10px; &#125;</span><br><span class="line">.alert-error &#123; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; &#125;</span><br><span class="line">.alert-success &#123; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; &#125;</span><br><span class="line">.alert-info &#123; background-color: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; &#125;</span><br><span class="line">.alert-warning &#123; background-color: #fff3cd; color: #856404; border: 1px solid #ffeeba; &#125;</span><br><span class="line">.file-content &#123; margin-top: 20px; padding: 15px; background-color: #eee; border: 1px solid #ddd; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word; &#125;</span><br><span class="line">nav &#123; margin-bottom: 20px; text-align: right; &#125;</span><br><span class="line">nav span &#123; margin-right: 15px; &#125;</span><br><span class="line">            &#x27;&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    app.run(debug=True, host=&#x27;0.0.0.0&#x27;, port=10002)</span><br></pre></td></tr></table></figure><p>在 app.py 中，token 的生成是将用户 ID 和用户级别（如 :guest 或 :admin）拼接后，使用 SM4 的 CBC 模式进行加密得到的，所以我们可以利用CBC 模式的特性来构造一个新的 token，使得解密后的用户级别变为 :admin。然后拿着新的token重新发包过去就可以了。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">BLOCK_SIZE = 16</span><br><span class="line"></span><br><span class="line">def pkcs7_pad(data, block_size):</span><br><span class="line">    padding_len = block_size - (len(data) % block_size)</span><br><span class="line">    padding = bytes([padding_len] * padding_len)</span><br><span class="line">    return data + padding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xor_bytes(b1, b2):</span><br><span class="line">    return bytes(x ^ y for x, y in zip(b1, b2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auth_token = &#x27;c575072409e12c59db9ce9fdf3bcda799808caf067156983cf80b58086d38e09&#x27;</span><br><span class="line">A = auth_token[:32]</span><br><span class="line">C_old = pkcs7_pad(&#x27;:guest&#x27;.encode(), BLOCK_SIZE)</span><br><span class="line">B = xor_bytes(bytes.fromhex(A), C_old)</span><br><span class="line">C_new = pkcs7_pad(&#x27;:admin&#x27;.encode(), BLOCK_SIZE)</span><br><span class="line">new_token = xor_bytes(B, C_new).hex() + auth_token[32:]</span><br><span class="line">print(new_token)</span><br></pre></td></tr></table></figure><p><img src="https://source.yizhixiaojiuli.cn/img/2025-2th-parloo/文件查看器1.png" alt="发包"></p>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-cryptoctf-wp</title>
      <link href="/2025/03/11/2024-cryptoctf-wp/"/>
      <url>/2025/03/11/2024-cryptoctf-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h1><h2 id="alibos"><a href="#alibos" class="headerlink" title="alibos"></a>alibos</h2><p>题目描述：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alibos, a classic cryptographic algorithm, is designed to safeguard non-sensitive data, providing a reliable solution for routine information protection.</span><br></pre></td></tr></table></figure></p><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import d, flag</span><br><span class="line"></span><br><span class="line">get_context().precision = 1337</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pad(m, d):</span><br><span class="line">    if len(str(m)) &lt; d:</span><br><span class="line">        m = str(m) + &#x27;1&#x27; * (d - len(str(m)))</span><br><span class="line">    return int(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def genkey(d):</span><br><span class="line">    skey = getRandomRange(10 ** (d - 1), 10 ** d)</span><br><span class="line">    pkey = int(10 ** d * (sqrt(skey) - floor(sqrt(skey))))</span><br><span class="line">    return pkey, skey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(m, pkey):</span><br><span class="line">    m = pad(m, len(str(pkey)))</span><br><span class="line">    d = len(str(pkey))</span><br><span class="line">    c = (pkey + d ** 2 * m) % (10 ** d)</span><br><span class="line">    return c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pkey, skey = genkey(d)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = encrypt(m, pkey)</span><br><span class="line"></span><br><span class="line">print(f&#x27;pkey = &#123;pkey&#125;&#x27;)</span><br><span class="line">print(f&#x27;enc  = &#123;c&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkey = 8582435512564229286688465405009040056856016872134514945016805951785759509953023638490767572236748566493023965794194297026085882082781147026501124183913218900918532638964014591302221504335115379744625749001902791287122243760312557423006862735120339132655680911213722073949690947638446354528576541717311700749946777</span><br><span class="line">enc  = 6314597738211377086770535291073179315279171595861180001679392971498929017818237394074266448467963648845725270238638741470530326527225591470945568628357663345362977083408459035746665948779559824189070193446347235731566688204757001867451307179564783577100125355658166518394135392082890798973020986161756145194380336</span><br></pre></td></tr></table></figure></p><p>简单来说的是按照如下方式进行加密：<br>$c = \text{pkey} + d^2 \quad (\text{pad}(m)) \quad \text{mod}(10^d)$<br>这里主要是未知d，但是仔细观察题目会发现$d = len(str(pkey))$ 所以d就已知了，直接解即可</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">pkey = 8582435512564229286688465405009040056856016872134514945016805951785759509953023638490767572236748566493023965794194297026085882082781147026501124183913218900918532638964014591302221504335115379744625749001902791287122243760312557423006862735120339132655680911213722073949690947638446354528576541717311700749946777</span><br><span class="line">c = 6314597738211377086770535291073179315279171595861180001679392971498929017818237394074266448467963648845725270238638741470530326527225591470945568628357663345362977083408459035746665948779559824189070193446347235731566688204757001867451307179564783577100125355658166518394135392082890798973020986161756145194380336</span><br><span class="line">p_d = len(str(pkey))</span><br><span class="line">mod = 10 ** p_d</span><br><span class="line">m = ((c - pkey) % mod * inverse(p_d ** 2, 10 ** p_d)) % mod</span><br><span class="line">print(m)</span><br><span class="line"># 这里是需要去掉pad所以直接复制出来的数字，也可以写个循环判断flag头</span><br><span class="line">flag = long_to_bytes(</span><br><span class="line">    int(617070432649333612824260819310073660177462690396680303631818904538190359368277582922920090537696854326452605))</span><br><span class="line">print(flag)</span><br><span class="line">#CCTF&#123;h0M3_m4De_cRyp70_5ySTeM_1N_CryptoCTF!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="Mashy"><a href="#Mashy" class="headerlink" title="Mashy"></a>Mashy</h2><p>题目描述：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mashy may seem like a simple cracking task, but you&#x27;ll need to open your eyes to identify the right things to crack.</span><br></pre></td></tr></table></figure></p><p>题目：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from hashlib import md5</span><br><span class="line">from binascii import *</span><br><span class="line">from secret import salt, flag</span><br><span class="line"></span><br><span class="line">def die(*args):</span><br><span class="line">pr(*args)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">def pr(*args):</span><br><span class="line">s = &quot; &quot;.join(map(str, args))</span><br><span class="line">sys.stdout.write(s + &quot;\n&quot;)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">def sc():</span><br><span class="line">return sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line">def xor(s1, s2):</span><br><span class="line">return bytes([s1[_] ^ s2[_] for _ in range(len(s1))])</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">border = &quot;┃&quot;</span><br><span class="line">pr(        &quot;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&quot;)</span><br><span class="line">pr(border, &quot;.: Hi all, she did Mashy, you should do it too! Are you ready? :. &quot;, border)</span><br><span class="line">pr(        &quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;)</span><br><span class="line"></span><br><span class="line">REC = []</span><br><span class="line">cnt, STEP = 0, 7</span><br><span class="line">sh = md5(salt).digest()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">pr(border, f&#x27;Please send your first input:  &#x27;)</span><br><span class="line">d1 = sc().strip()</span><br><span class="line">pr(border, f&#x27;Please send your second input: &#x27;)</span><br><span class="line">d2 = sc().strip()</span><br><span class="line">try:</span><br><span class="line">d1 = hexlify(unhexlify(d1))</span><br><span class="line">d2 = hexlify(unhexlify(d2))</span><br><span class="line">h1 = md5(unhexlify(d1)).digest()</span><br><span class="line">h2 = md5(unhexlify(d2)).digest()</span><br><span class="line">except:</span><br><span class="line">die(border, &#x27;Your inputs are not valid! Bye!!!&#x27;)</span><br><span class="line">if d1 != d2 and d1 not in REC and d2 not in REC:</span><br><span class="line">if md5(xor(d1, d2)).hexdigest() != &#x27;ae09d7510659ca40eda3e45ca70e9606&#x27;:</span><br><span class="line">if hexlify(xor(xor(h1, h2), sh)) == b&#x27;a483b30944cbf762d4a3afc154aad825&#x27;:</span><br><span class="line">REC += [d1, d2]</span><br><span class="line">if cnt == STEP:</span><br><span class="line">die(border, f&#x27;Congrats! the flag: &#123;flag&#125;&#x27;)</span><br><span class="line">pr(border, &#x27;Good job, try next level :P&#x27;)</span><br><span class="line">cnt += 1</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;Your input is not correct! Bye!&#x27;)</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;No this one! Sorry!!&#x27;)</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;Kidding me!? Bye!!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><p>简单来说是要完成七轮挑战，使得输入的两个16进制串d1,d2，使得满足：</p><ul><li>d1 不等于 d2</li><li>d1 xor d2 的md5不为 ae09d7510659ca40eda3e45ca70e9606</li><li>md5(d1) xor md5(d2) xor sh 的值为 a483b30944cbf762d4a3afc154aad825</li></ul><p>这题纯出题人脑子有病，出的莫名其妙的，全靠猜<br>ae09d7510659ca40eda3e45ca70e9606的原像为：b’\x00’ * 256<br>a483b30944cbf762d4a3afc154aad825的原像为：emelinjulca<br>然后我们不知道salt也就是sh，就进行不下去了，其实sh就是emelinjulca，纯就跟出题人脑袋相接才能做<br>（ps； 赛中的时候我人都傻了，然后一看几十解了，就拿emelinjulca试了一下结果真是，真是无了大语了）<br>到这里问题就简单了，整几组前缀进行MD5碰撞就完事了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;01.cr.yp.toc.tf&quot;,13771)</span><br><span class="line"></span><br><span class="line">msg = [(b&quot;31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe11ecc10c7ab8b4fe112d7f29ceb2dae1f39ce7a691488bfb817b7685ad087a162b0ce0ea69b140e7274b44c43f183578392f9719b43d4966c321cc0a10e6fbd002869b42f9fad9eb869dc55d5d349835961b1fd36a0bbe76a9bb5f4f5cc54136dec48d74497bf6579a6bf9721b81078637b429cff958886bd816dc4333a338&quot;,b&quot;31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe11ecc10c7ab8b4fe112d7f29ceb2dae1f39c67a691488bfb817b7685ad087a162b0ce0ea69b140e7274b44c4bf183578392f9719b43d4966c3214c0a10e6fbd002869b42f9fad9eb869dc55d5d349835961b9fd36a0bbe76a9bb5f4f5cc54136dec48d74497bf6579a6bf9729b80078637b429cff958886bd8165c4333a338&quot;),</span><br><span class="line">       (b&quot;32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebcd0390c198c8f33b4a08cce32f47451b5002e68895b7505d12824a0a460d133de3eff34e4de89ceb27ed3bce211b4696fec6736c059058d8b60f6e473f6c701068abf2d6bc645c4589a6f0f5211f5fc903c96e789d91f8abb300d8176088b7d31d825897c9001cf409c45b3a50005e93e33f4f908f9df944a664c927d28d55&quot;,b&quot;32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebcd0390c198c8f33b4a08cce32f47451b5002668895b7505d12824a0a460d133de3eff34e4de89ceb27ed3bcea11b4696fec6736c059058d8b60fee473f6c701068abf2d6bc645c4589a6f0f5211f5fc903c9ee789d91f8abb300d8176088b7d31d825897c9001cf409c45b3ad0ff5d93e33f4f908f9df944a6644927d28d55&quot;),</span><br><span class="line">       (b&quot;3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068270588dbc19cfe24db79019b0070d1823c4a4d6d816cdb22c2401a32081455e5db01c54c0ccf1b6706f061eec3e58ead12b5173dee55f954f9ac52a1a4bbedc32ab0ee3cae3896f9908a49d38cc5535c6c80661d262e1ec91a8639ecc7e1654086c61bf4cfe7fc6a7378f7809416ef39ae4ccc7fc29570c4c3a51b03fed7b9&quot;,b&quot;3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068270588dbc19cfe24db79019b0070d1823c4acd6d816cdb22c2401a32081455e5db01c54c0ccf1b6706f061ee43e68ead12b5173dee55f954f9acd2a1a4bbedc32ab0ee3cae3896f9908a49d38cc5535c6c80e61d262e1ec91a8639ecc7e1654086c61bf4cfe7fc6a7378f7801416ef39ae4ccc7fc29570c4c3a59b03fed7b9&quot;),</span><br><span class="line">       (b&quot;3400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025a80516e996c87574dc568d274da9d2d281b09bbc72f7ef46767961b4a708e969ebffe06a6e0945cbefe2f2fc41d89cb89c2574afb1fdbac5aca131cdf52d68b9e3c95615888cbc3d187ccd32f60d5b35636e925c1aa3002bb330c81b6088d8cbeb8014afc24f5e374ad05ab2f30d1fac7221195b7f3f1f19f5219ecaf948a2&quot;,b&quot;3400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025a80516e996c87574dc568d274da9d2d281b01bbc72f7ef46767961b4a708e969ebffe06a6e0945cbefe2f2fcc1d89cb89c2574afb1fdbac5aca1b1cdf52d68b9e3c95615888cbc3d187ccd32f60d5b35636e125c1aa3002bb330c81b6088d8cbeb8014afc24f5e374ad05ab2730d1fac7221195b7f3f1f19f5211ecaf948a2&quot;),</span><br><span class="line">       (b&quot;35000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f56f1da5ad57f483059ae0869962f05204f954e2de9d56c55b168139ec372cefb1b307cbe84ce477cbff5df4d40bc46c08ceef8bb18bfc996b3b9fdaa7b72c17ee1cb3491794d6e2ff7d9914525cdf2d88b9314505ef864d201d2b364a6e25ae4d183e738c3c86e53e5ad1a1910c825cb1bcd59b97d1a3cf979668fbac6a138b&quot;,b&quot;35000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f56f1da5ad57f483059ae0869962f05204f95462de9d56c55b168139ec372cefb1b307cbe84ce477cbff5df4d48bc46c08ceef8bb18bfc996b3b9f5aa7b72c17ee1cb3491794d6e2ff7d9914525cdf2d88b931c505ef864d201d2b364a6e25ae4d183e738c3c86e53e5ad1a1918c815cb1bcd59b97d1a3cf9796687bac6a138b&quot;),</span><br><span class="line">       (b&quot;36000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f2b343c2bb614b7b4acc4e0ade8a5e4b2abb4eefe97ef7991832793e4e301637cf0becd84c43dbafeb43d0da12c8e2883e0d02ada60e678e3470ee866abe2fa713b8a521a986e75d821f74221fee2ea441b3ab462f29b56f862b00d05f60cdc1a9a1c92d04457bd6e693673963ab6e6b6c3552cd1c54efe627b342fecdfd8dea&quot;,b&quot;36000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f2b343c2bb614b7b4acc4e0ade8a5e4b2abb4e6fe97ef7991832793e4e301637cf0becd84c43dbafeb43d0da1248e3883e0d02ada60e678e3470ee066abe2fa713b8a521a986e75d821f74221fee2ea441b3abc62f29b56f862b00d05f60cdc1a9a1c92d04457bd6e6936739632b6e6b6c3552cd1c54efe627b3427ecdfd8dea&quot;),</span><br><span class="line">       (b&quot;370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d6afba61c0910b5ca21a9164b65134753b3845080d9afe6460237a1d938a8385204b0e85cce2b686b40d9b9c517e64b08ee01d02fa63470aa3b34c1e550d11356d867ea70e96b0257d9b1b20df1ee22603111180739001ad17bf6c8dd707932b34e97b62e74936197adcc2f93164b46c7c7e4bb7b6c1a55a21958961f7378be&quot;,b&quot;370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d6afba61c0910b5ca21a9164b65134753b384d080d9afe6460237a1d938a8385204b0e85cce2b686b40d9b9c597e64b08ee01d02fa63470aa3b3441e550d11356d867ea70e96b0257d9b1b20df1ee22603111980739001ad17bf6c8dd707932b34e97b62e74936197adcc2f93964a46c7c7e4bb7b6c1a55a21958161f7378be&quot;),</span><br><span class="line">       (b&quot;38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c6eb639aedf271805029b40d4dc783ab8d769d35cb9032f9184641b94c881615f5f902cb5e8ba3176f2660d4f821828fdbed111365cc4dfbbf001ca884fcb74df4f681c17ed38f53b8346319fee0c2eaecf2ea2597f0ca2c04ed6c064e9e3ddd7d37ff3e54908e889a58455a8fd411bc0f75e93cadc453f6f89d16e8cd8e7c2a&quot;,b&quot;38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c6eb639aedf271805029b40d4dc783ab8d769db5cb9032f9184641b94c881615f5f902cb5e8ba3176f2660d4f8a1828fdbed111365cc4dfbbf001c2884fcb74df4f681c17ed38f53b8346319fee0c2eaecf2eaa597f0ca2c04ed6c064e9e3ddd7d37ff3e54908e889a58455a8f5411bc0f75e93cadc453f6f89d1668cd8e7c2a&quot;)]</span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    sh.sendline(msg[i][0])</span><br><span class="line">    sh.sendline(msg[i][1])</span><br><span class="line"></span><br><span class="line">sh.recvuntil(b&quot;Congrats! the flag: &quot;)</span><br><span class="line"></span><br><span class="line">print(sh.recvline())</span><br><span class="line"></span><br><span class="line">#CCTF&#123;mD5_h4Sh_cOlL!Si0N_CrYp7o_ch41lEnGe!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="Beheaded"><a href="#Beheaded" class="headerlink" title="Beheaded$"></a>Beheaded$</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The beheaded flags have had their headers removed, making them encrypted. Can a living entity truly survive without a head?</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">source secrets.sh</span><br><span class="line"></span><br><span class="line">FLAGS=&quot;all_flags.txt&quot;</span><br><span class="line">rm -f &quot;all_flags.enc&quot;</span><br><span class="line"></span><br><span class="line">while read flag; do</span><br><span class="line">magick -background white -fill blue -pointsize 72 -size &quot;$X&quot;x&quot;$Y&quot; -gravity North caption:&quot;$flag&quot; flag.ppm</span><br><span class="line">tail -n +4 flag.ppm &gt; tail</span><br><span class="line">openssl enc -aes-256-ecb -pbkdf2 -nosalt -pass pass:&quot;$KEY&quot; -in tail &gt;&gt; &quot;all_flags.enc&quot;</span><br><span class="line">done &lt; &quot;$FLAGS&quot;</span><br></pre></td></tr></table></figure><p>题目将flag串写在图片上，然后对这张图片进行ECB加密，最后得到密文文件。<br>这个不太会，看春哥说是用工具，以后再说吧。</p><h1 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h1><h2 id="Alilbols"><a href="#Alilbols" class="headerlink" title="Alilbols"></a>Alilbols</h2><p>题目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import d, flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def genkey(d):</span><br><span class="line">    while True:</span><br><span class="line">        f = getRandomRange(1, int(sqrt(2) * 10 ** d))</span><br><span class="line">        g = getRandomRange(10 ** d, int(sqrt(2) * 10 ** d))</span><br><span class="line">        if gcd(f, 10 * g) == 1:</span><br><span class="line">            q = 4 * 100 ** d</span><br><span class="line">            h = inverse(f, q) * g % q</span><br><span class="line">            if gcd(h, 10 * d) == 1:</span><br><span class="line">                break</span><br><span class="line">    pkey, skey = (d, h), (f, g)</span><br><span class="line">    return pkey, skey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(m, pkey):</span><br><span class="line">    d, h = pkey</span><br><span class="line">    q = 4 * 100 ** d</span><br><span class="line">    assert m &lt; 10 ** d</span><br><span class="line">    r = getRandomRange(1, 10 ** d // 2)</span><br><span class="line">    c = (r * h + m + r) % q</span><br><span class="line">    return c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pkey, _ = genkey(d)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = encrypt(m, pkey)</span><br><span class="line"></span><br><span class="line">print(f&#x27;h = &#123;pkey[1]&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h = 1051643987107349427988807326909852110640860009433515828832892541964729933410444984350917250524103015414239941369074041041830326426044333499878031164851095096864048639115431370526747014210332286314344073411522846701723463410585601251886732229726828022089809603850477551571014006202841406236367999378786782206165205893353928598469661871284779486855440579818275314024966224282757807716013799903830828885606714972634243850947534165272668985513949964901606268939300116019465522042467054120201087606016018354238401711720121586874288767235317479748890350702705575809130664969776549574720593740409234863974057904204809404816059921579771581800937241591669455683460570640868196509926763901079838233646036933530095891316054589051458146768287967886035091641162494322987627448810201550901588438560433001422233269632915351406169253963308421081459981594969405377353502889363324282815864766827664453823780238352371809048289845094882346227809082005375092441877966603138648719670349093616548820955566204871333952902983753935678447080673827214244142614295192263451840766771122229866931492260663320087497820892824540996643905125018452302747847009</span><br><span class="line">c = 11913143174789215053772744981113562063689725867199301496294410323568897757042952642806438602327917861884988292757318755590132189620231444302311290566584065812614959093870787195145654508262419270742989923415342357807325941686508030706603920412262004324188375072184983301522882728578077572816154054220606088703932092256905881975876112779175003897105313776239681492514925430817300633974666123599685062340158348009344351002327049272743679109535286730751345284084148118733529966364414749672437370878526710641430471595906340522772252875146681541656231708112317601000655090279925720590940060372738708208419449824043905057860829031242339842131799965043031307394209699264362321397162645220002253271689678364848888381499587038475895945238726252440250183268252483198408039250213490525880829604473555612305513974817850974135874728084839426045420913060975464553734293001460752648937744531874552694145500413222582269910431269597066268600572899619407093373565994271589940926018891922169454906132284552523035481664164354874071831210264979733079749696197917769435226866441989054017071332158916586376454753209296136133271926449919437888563234409</span><br></pre></td></tr></table></figure><p>密钥生成有：</p><ul><li>$ 1 \leq f &lt; \sqrt{2} \cdot 10 ^ d$</li><li>$ 10 ^ d \leq g &lt; \sqrt{2} \cdot 10 ^ d$</li><li>$ q = 4 \cdot 10 ^ 2d$</li><li>$ h = f ^ {-1} g \ (mod \ q)$</li></ul><p>加密有:</p><ul><li>取一个随机数r, 满足 $ 1 &lt; r &lt; \frac{10^d}{2}$</li><li>计算密文 $ c = rh + m + r \ (mod \ q) $</li></ul><p>给出了h,c, 需要还原m</p><p>很明显是NTRU，直接造格：<br>$\begin{bmatrix} r &amp; -1 &amp; k \end{bmatrix}$ <script type="math/tex">\begin{bmatrix} 1 & 0 & h+1 \\ 0 & 1 & c \\ 0 & 0 & q  \end{bmatrix}</script> = $\begin{bmatrix} r &amp; -1 &amp; -m \end{bmatrix}$</p><p>但是我们不知道d,q, 所以需要枚举一下d的大小</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">h = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">for d in range(500,800):</span><br><span class="line">    q = 4 * 10 ** (2 *d)</span><br><span class="line">    M = matrix(ZZ, [[2, 0, h+1],</span><br><span class="line">                [0, 10^d,c],</span><br><span class="line">                [0, 0,   q]])</span><br><span class="line">    v = M.LLL()[0] </span><br><span class="line">    m = int(abs(v[-1]))</span><br><span class="line">    if b&#x27;CCTF&#x27; in long_to_bytes(m):</span><br><span class="line">        print(d)</span><br><span class="line">        print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="Ally"><a href="#Ally" class="headerlink" title="Ally*"></a>Ally*</h2><p>题目描述： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ally enjoys the challenge of solving Diophantine equations, so help them tackle this latest complex equation as well.</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">def die(*args):</span><br><span class="line">pr(*args)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">def pr(*args):</span><br><span class="line">s = &quot; &quot;.join(map(str, args))</span><br><span class="line">sys.stdout.write(s + &quot;\n&quot;)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">def sc():</span><br><span class="line">return sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">border = &quot;┃&quot;</span><br><span class="line">pr(        &quot;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&quot;)</span><br><span class="line">pr(border, &quot;.::  Ally is my best friend, help him to solve his tough task  ::.&quot;, border)</span><br><span class="line">pr(        &quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;)</span><br><span class="line"></span><br><span class="line">nbit = 14</span><br><span class="line">level, step = 0, 19</span><br><span class="line">while True:</span><br><span class="line">pr(border, f&#x27;Please send your &#123;nbit&#125;-bit prime:  &#x27;)</span><br><span class="line">p = sc().strip()</span><br><span class="line">try:</span><br><span class="line">p = int(p)</span><br><span class="line">except:</span><br><span class="line">die(border, &#x27;Your input is not valid! Bye!!!&#x27;)</span><br><span class="line">if isPrime(p) and p.bit_length() == nbit:</span><br><span class="line">pr(border, &#x27;Send the solution of the following Diophantine equation in positive integers x, y&#x27;)</span><br><span class="line">pr(border, f&#x27;&#123;p&#125; * (x - y)**3 = (x**2 + y) * (x + y**2)&#x27;)</span><br><span class="line">xy = sc().strip().decode()</span><br><span class="line">try:</span><br><span class="line">x, y = [int(_) for _ in xy.split(&#x27;,&#x27;)]</span><br><span class="line">except:</span><br><span class="line">die(border, &#x27;Your answer is not valid! Bye!!!&#x27;)</span><br><span class="line">if p * (x - y)**3 == (x**2 + y) * (x + y**2) and x &gt; 0 and y &gt; 0:</span><br><span class="line">if level == step:</span><br><span class="line">die(border, f&#x27;Congratz! You got the flag: &#123;flag&#125;&#x27;)</span><br><span class="line">else:</span><br><span class="line">pr(border, f&#x27;Good job, try the next step &#123;level + 2&#125;&#x27;)</span><br><span class="line">level += 1</span><br><span class="line">nbit = int(1.2*nbit) + getRandomRange(0, 6)</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;Your answer is not correct! Bye!!&#x27;)</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;Kidding me!? Bye!!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><ul><li>就是给出19对如下的丢番图方程的正整数解：<script type="math/tex; mode=display">p(x-y)^3 = (x^2 + y)(x+y^2)</script></li></ul><p>赛中没做出来，赛后发现其实:</p><script type="math/tex; mode=display">p = 4y+1x = 2y+1</script><p>就可以了</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def get_valid_prime(bits):</span><br><span class="line">    while True:</span><br><span class="line">        p = getPrime(bits)</span><br><span class="line">        if p % 4 == 1:</span><br><span class="line">            return p</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    sh = remote(&#x27;01.cr.yp.toc.tf&#x27;, 13777)</span><br><span class="line">    for i in range(20):</span><br><span class="line">        sh.recvuntil(b&#x27;Please send your &#x27;)</span><br><span class="line">        bit_length = sh.recvuntil(b&#x27;-&#x27;)[:-1]</span><br><span class="line">        bit_length = int(bit_length)</span><br><span class="line">        sh.recvline()</span><br><span class="line"></span><br><span class="line">        p = get_valid_prime(bit_length)</span><br><span class="line">        y = (p - 1) // 4</span><br><span class="line">        x = 2 * y + 1</span><br><span class="line"></span><br><span class="line">        sh.sendline(str(p).encode())</span><br><span class="line">        sh.recvline()</span><br><span class="line">        sh.sendline(f&#x27;&#123;x&#125;,&#123;y&#125;&#x27;.encode())</span><br><span class="line">        sh.recv()</span><br><span class="line"></span><br><span class="line">    print(sh.recvline())</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;发生错误: &#123;e&#125;&quot;)</span><br></pre></td></tr></table></figure><h2 id="Bada"><a href="#Bada" class="headerlink" title="Bada*"></a>Bada*</h2><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Bada equation contains an undetermined function. By closely examining how this equation behaves, you may be able to discover the concealed flag.</span><br></pre></td></tr></table></figure><p>题目:</p><p>存在一个函数方程f: N×N → Z:</p><ul><li>$ f(a+1,b) = f(a,b) + a $</li><li>$ f(a,b+1) = f(a,b) - b $</li></ul><p>给定了f($x_0$,$y_0$)的函数值，以及f（x,y）的值，求（x,y）使满足f(x,y)=z</p><p>很明显这两个函数方程可以看作两个等差数列，也就是有:</p><script type="math/tex; mode=display">f(x,y) =  f(1,1) + (1+2+...+(x-1)) - (1+2+...+(y-1))</script><p>即是：</p><script type="math/tex; mode=display">f(x,y) = f(1,1) + \frac{(x-1)(x)}{2} - \frac{(y-1)(y)}{2}</script><p>记f(1,1)为c<br>也就是有：</p><script type="math/tex; mode=display">f(x,y) = \frac{(x-1)(x)}{2} - \frac{(y-1)(y)}{2} + c</script><p>这里就把问题变成了解关于x和y的不定方程的问题:</p><script type="math/tex; mode=display">\begin{align*}2(z-c) &= x(x-1)- y(y-1) \\       &= (x-y)(x+y-1) \quad \text{} \\\end{align*}</script><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from Pwn4Sage.pwn import *</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">class EquationSolver:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.pattern = r&#x27;f\((\d+), (\d+)\) = (-?\d+) and f\(x, y\) = (-?\d+)\n&#x27;</span><br><span class="line">        self.conn = remote(&#x27;node4.anna.nssctf.cn&#x27;, 28634)</span><br><span class="line"></span><br><span class="line">    def solve(self, prev_x, prev_y, base_z, target_z):</span><br><span class="line">        adjusted_z = base_z - (prev_x * (prev_x - 1) // 2) + (prev_y * (prev_y - 1) // 2)</span><br><span class="line">        left_hand = 8 * (target_z - adjusted_z)</span><br><span class="line">        for factor1 in divisors(left_hand):</span><br><span class="line">            factor2 = left_hand // factor1</span><br><span class="line">            if factor1 % 2 != 0 or factor2 % 2 != 0:</span><br><span class="line">                continue</span><br><span class="line">            half_factor1 = factor1 // 2</span><br><span class="line">            half_factor2 = (factor2 + 2) // 2</span><br><span class="line">            if (half_factor1 + half_factor2) % 2 != 0:</span><br><span class="line">                continue</span><br><span class="line">            x = (half_factor1 + half_factor2) // 2</span><br><span class="line">            y = (half_factor2 - half_factor1) // 2</span><br><span class="line">            return x, y</span><br><span class="line">        raise Exception(&quot;No solution found&quot;)</span><br><span class="line"></span><br><span class="line">    def process_step(self):</span><br><span class="line">        self.conn.recvuntil(b&#x27;We know: &#x27;)</span><br><span class="line">        line = self.conn.recvline().decode()</span><br><span class="line">        match = re.match(self.pattern, line)</span><br><span class="line">        if not match:</span><br><span class="line">            raise Exception(&quot;Format error in received data&quot;)</span><br><span class="line">        prev_x, prev_y, base_z, target_z = map(int, match.groups())</span><br><span class="line">        x, y = self.solve(prev_x, prev_y, base_z, target_z)</span><br><span class="line">        self.conn.sendline(f&quot;&#123;x&#125;,&#123;y&#125;&quot;.encode())</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        for _ in range(20):</span><br><span class="line">            self.process_step()</span><br><span class="line">        self.conn.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    solver = EquationSolver()</span><br><span class="line">    solver.run()    </span><br></pre></td></tr></table></figure><h2 id="Duzly"><a href="#Duzly" class="headerlink" title="Duzly$"></a>Duzly$</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Duzly is a straightforward hash function design based on congruence relationships over a prime number modulus.</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from os import urandom</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">def pad(m):</span><br><span class="line">m += b&#x27;\x8f&#x27; * (8 - len(m) % 8)</span><br><span class="line">return m</span><br><span class="line"></span><br><span class="line">def duzly(m, C):</span><br><span class="line">ow, E = 0, [2**24 + 17, 2**24 + 3, 3, 2, 1, 0]</span><br><span class="line">for _ in range(6):</span><br><span class="line">ow += C[_] * pow(m, E[_], p)</span><br><span class="line">return ow % p</span><br><span class="line"></span><br><span class="line">def pashan(msg):</span><br><span class="line">msg = pad(msg)</span><br><span class="line">pash, msg = b&#x27;&#x27;, [msg[8*i:8*(i+1)] for i in range(len(msg) // 8)]</span><br><span class="line">for m in msg:</span><br><span class="line">_h = duzly(bytes_to_long(m), C).to_bytes(8, &#x27;big&#x27;)</span><br><span class="line">pash += _h</span><br><span class="line">return pash</span><br><span class="line"></span><br><span class="line">p = 2**64 - 59</span><br><span class="line">C = [1] + [randint(0, p) for _ in range(5)]</span><br><span class="line">flag = urandom(getRandomRange(0, 110)) + flag + urandom(getRandomRange(0, 110))</span><br><span class="line">_pash = pashan(flag)</span><br><span class="line"></span><br><span class="line">f = open(&#x27;_pash_updated&#x27;, &#x27;wb&#x27;)</span><br><span class="line">f.write(str(C).encode() + b&#x27;\n&#x27;)</span><br><span class="line">f.write(_pash)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>赛中看0解（自知之明一手）就没看，赛后一看果然没看懂<br>这里贴一下大佬的做法<a href="https://www.github.com/Sarkoxed/ctf-writeups/tree/master/cryptoctf2024/duzly_updated">这里</a></p><h2 id="Forghan"><a href="#Forghan" class="headerlink" title="Forghan*"></a>Forghan*</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Forghan, the combination of RSA and DLP cryptography, may in certain instances prove more accessible than employing either method individually.</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from hashlib import sha256</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">def die(*args):</span><br><span class="line">pr(*args)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">def pr(*args):</span><br><span class="line">s = &quot; &quot;.join(map(str, args))</span><br><span class="line">sys.stdout.write(s + &quot;\n&quot;)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">def sc():</span><br><span class="line">return sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line">def find_gen(p):</span><br><span class="line">while True:</span><br><span class="line">g = getRandomRange(2, p - 1)</span><br><span class="line">if pow(g, (p-1)//2 , p) != 1:</span><br><span class="line">return g</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">border = &quot;┃&quot;</span><br><span class="line">pr(        &quot;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&quot;)</span><br><span class="line">pr(border, &quot;Hi all, now it&#x27;s time to solve a strange and unusual RSA and DLP    &quot;, border)</span><br><span class="line">pr(border, &quot;challenge about encryption! Follow the questions and find the secret&quot;, border)</span><br><span class="line">pr(border, &quot;flag! :)                                                            &quot;, border)</span><br><span class="line">pr(        &quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;)</span><br><span class="line">nbit, b = 256, False</span><br><span class="line">while True:</span><br><span class="line">pr(f&quot;| Options: \n|\t[G]et encrypted flag \n|\t[P]ublic parameters \n|\t[S]ubmit &#123;nbit&#125; primes \n|\t[Q]uit&quot;)</span><br><span class="line">ans = sc().decode().lower().strip()</span><br><span class="line">if ans == &#x27;g&#x27;:</span><br><span class="line">if b == True:</span><br><span class="line">l, n = len(flag), (p**2 - 1) * (q**2 - 1)</span><br><span class="line">gp, gq = find_gen(p), find_gen(q)</span><br><span class="line">sp, sq = getRandomRange(1, p), getRandomRange(1, q)</span><br><span class="line">flagp, flagq = flag[:l // 2], flag[l // 2:]</span><br><span class="line">yp, yq = pow(gp, sp, p), pow(gq, sq, q)</span><br><span class="line">cp, cq = pow(bytes_to_long(flagp), yp, n), pow(bytes_to_long(flagq), yq, n)</span><br><span class="line">pr(border, f&#x27;cp = &#123;cp&#125;&#x27;)</span><br><span class="line">pr(border, f&#x27;cq = &#123;cq&#125;&#x27;)</span><br><span class="line">else: pr(border, &#x27;Please first send your primes! :P&#x27;)</span><br><span class="line">elif ans == &#x27;s&#x27;:</span><br><span class="line">pr(border, &#x27;Send your desired prime numbers separated by comma: &#x27;)</span><br><span class="line">P = sc()</span><br><span class="line">try:</span><br><span class="line">p, q = P.split(b&#x27;,&#x27;)</span><br><span class="line">p, q = int(p), int(q)</span><br><span class="line">except: die(border, &#x27;Your input are not integer! Bye!!&#x27;)</span><br><span class="line">if p != q and isPrime(p) and isPrime(q) and p.bit_length() == q.bit_length() == nbit:</span><br><span class="line">b = True</span><br><span class="line">pr(border, &#x27;Now you can get the encrypted flag in main menu!&#x27;)</span><br><span class="line">else: die(border, &#x27;Sorry, your integers are not valid :/&#x27;)</span><br><span class="line">elif ans == &#x27;p&#x27;:</span><br><span class="line">if b == True:</span><br><span class="line">pr(border, f&#x27; gp = &#123;gp&#125;&#x27;)</span><br><span class="line">pr(border, f&#x27; gq = &#123;gq&#125;&#x27;)</span><br><span class="line">pr(border, f&#x27; yp = &#123;yp&#125;&#x27;)</span><br><span class="line">pr(border, f&#x27; yq = &#123;yq&#125;&#x27;)</span><br><span class="line">else: pr(border, &#x27;Please first send your primes! :P&#x27;)</span><br><span class="line">elif ans == &#x27;q&#x27;:</span><br><span class="line">die(border, &#x27;Quitting...&#x27;)</span><br><span class="line">else:</span><br><span class="line">die(border, &#x27;You should select valid choice!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>题目有三个选项，但是显然是有顺序的，具体来说应该按照下面来：</p><ul><li>选择”S”，输入256bit的素数p、q</li><li>选择”G”，靶机对flag进行加密，加密流程如下：<ul><li>生成n，n = (p^2 - 1) * (q^2 - 1)</li><li>分别生成p、q下的一个随机二次非剩余gp、gq</li><li>生成p、q下的随机数sp、sq</li><li>将flag分为两段，记为flagp、flagq，对应数字记为mp、mq</li><li>计算yp、yq，    $y_p = g_p^{s_p} \pmod{p}$，$y_q = g_q^{s_q} \pmod{q}$</li><li>计算密文cp、cq，$c_p = m_p^{y_p} \pmod{n}$ ,$c_q = m_q^{y_q} \pmod{n}$</li></ul></li></ul><p>选择”P”，获取gp、gq、yp、yq的值</p><p>由于有 $y_p$、$y_q$，所以这里就变成了解一个RSA的问题，由于flag是静态的，所以可以放在一个子群里去求解，放在模p-1下有：</p><script type="math/tex; mode=display">c_p = m_p^{y_p} \pmod{p-1}</script><script type="math/tex; mode=display">c_q = m_q^{y_q} \pmod{q-1}</script><p>由于p和q都是自己构造的，很容就能得到p-1的分解，就可以解RSA解出mp、mq在p-1下的值，又因为flag是静态的，所以完全可以多次交互求crt</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from sympy.ntheory.modular import crt</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;node4.anna.nssctf.cn&quot;, 28932)</span><br><span class="line"></span><br><span class="line">def gen_prime():</span><br><span class="line">    while True:</span><br><span class="line">        p = getPrime(255)</span><br><span class="line">        if isPrime(2*p+1):</span><br><span class="line">            return 2*p+1</span><br><span class="line"></span><br><span class="line">nums = 10</span><br><span class="line">P = [gen_prime() for i in range(nums)]</span><br><span class="line">mp = []</span><br><span class="line">mq = []</span><br><span class="line">for i in range(nums):</span><br><span class="line">    sh.sendline(b&quot;s&quot;)</span><br><span class="line">    sh.recvuntil(b&#x27;Send your desired prime numbers separated by comma: &#x27;)</span><br><span class="line">    q = getPrime(256)</span><br><span class="line">    sh.sendline((str(P[i]) + &#x27;,&#x27; + str(q)).encode())</span><br><span class="line"></span><br><span class="line">    sh.sendline(b&quot;g&quot;)</span><br><span class="line">    sh.recvuntil(b&quot;cp = &quot;)</span><br><span class="line">    cp = int(sh.recvline().strip().decode())</span><br><span class="line">    sh.recvuntil(b&quot;cq = &quot;)</span><br><span class="line">    cq = int(sh.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">    sh.sendline(b&quot;p&quot;)</span><br><span class="line">    sh.recvuntil(b&quot;gp = &quot;)</span><br><span class="line">    gp = int(sh.recvline().strip().decode())</span><br><span class="line">    sh.recvuntil(b&quot;gq = &quot;)</span><br><span class="line">    gq = int(sh.recvline().strip().decode())</span><br><span class="line">    sh.recvuntil(b&quot;yp = &quot;)</span><br><span class="line">    yp = int(sh.recvline().strip().decode())</span><br><span class="line">    sh.recvuntil(b&quot;yq = &quot;)</span><br><span class="line">    yq = int(sh.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">    k = (P[i] - 1) // 2</span><br><span class="line">    mp.append(pow(cp, inverse(yp, k - 1), P[i]))</span><br><span class="line">    mq.append(pow(cq, inverse(yq, k - 1), P[i]))</span><br><span class="line"></span><br><span class="line">Mp = crt(P, mp)[0]</span><br><span class="line">Mq = crt(P, mq)[0]</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(Mp))</span><br><span class="line">print(long_to_bytes(Mq))</span><br></pre></td></tr></table></figure><h2 id="Honey"><a href="#Honey" class="headerlink" title="Honey"></a>Honey</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Honey is a concealed cryptographic algorithm designed to provide secure encryption for sensitive messages.</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from math import sqrt</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">def gen_params(nbit):</span><br><span class="line">p, Q, R, S = getPrime(nbit), [], [], []</span><br><span class="line">d = int(sqrt(nbit &lt;&lt; 1))</span><br><span class="line">for _ in range(d):</span><br><span class="line">Q.append(getRandomRange(1, p - 1))</span><br><span class="line">R.append(getRandomRange(0, p - 1))</span><br><span class="line">S.append(getRandomRange(0, p - 1))</span><br><span class="line">return p, Q, R, S</span><br><span class="line"></span><br><span class="line">def encrypt(m, params):</span><br><span class="line">p, Q, R, S = params</span><br><span class="line">assert m &lt; p</span><br><span class="line">d = int(sqrt(p.bit_length() &lt;&lt; 1))</span><br><span class="line">C = []</span><br><span class="line">for _ in range(d):</span><br><span class="line">r, s = [getRandomNBitInteger(d) for _ in &#x27;01&#x27;]</span><br><span class="line">c = Q[_] * m + r * R[_] + s * S[_]</span><br><span class="line">C.append(c % p)</span><br><span class="line">return C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nbit = 512</span><br><span class="line">params = gen_params(512)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">C = encrypt(m, params)</span><br><span class="line">f = open(&#x27;params_enc.txt&#x27;, &#x27;w&#x27;)</span><br><span class="line">f.write(f&#x27;p = &#123;params[0]&#125;\n&#x27;)</span><br><span class="line">f.write(f&#x27;Q = &#123;params[1]&#125;\n&#x27;)</span><br><span class="line">f.write(f&#x27;R = &#123;params[2]&#125;\n&#x27;)</span><br><span class="line">f.write(f&#x27;S = &#123;params[3]&#125;\n&#x27;)</span><br><span class="line">f.write(f&#x27;C = &#123;C&#125;&#x27;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>params_enc.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 10580731215444436219213907263947534038012197972307836319229421193761088798378768844649759133142120180834573817149711299466707823017636232456526471274387917</span><br><span class="line">Q = [6718668664591596190749745980002066645380242844394957953766947533978323053938214647829798301606252456858132121628517723050462291300790766055200866765561610, 8738840830394886495658505803088103824478963010774845789433253508554356383249611502157307334585157729703873877797759121271071421201959116272886732798936523, 4388762712805764363921857352899834586382140923234814556069490536704913653848525595836491615636446563386705915348021173847271741862809075809151508973332816, 3663706247989213864330218414789109172658418861584264092087052781618522795676355371739296186667918464732397854703792563460353675590182379535358561615166754, 10397730940373180549512945920847346184926672474430866208628825035104473525758952069910968144296138220861205803231072660136999110567752870928953292888013817, 7950983396364741732874562189206547723862955251595526752956177377987683115942827501152009639962778147887569469649852864894630521759276627026901168996371682, 4533165373271154956275563812280832107592547920299130443910706773435844651231402604986107252454770256826684895729900344877444002682896222483157835711226276, 234527648838985018479849393379369972316648524004050156622962478277970628212208049885578895953447529009579881605066831810617219492342569126524704457098602, 870946394610707169333783318085559836426827503011955242395779894700298192587685130680102208909573921059078858816359885827349281892186755920839352494224983, 5025393101560564396356619431938053414422489109406396725377683594254768077793838379117179092536396259414266971990125716674162127500490058572594571364978294, 5914192169617888877888201158713062853387719050723973971874176184801960297380845845091259990664210178355882621876155306106794686897854891414999449337977781, 2315609284318723939818174971181608382568372323836754133265010413836452399043354382657889810068171230196496294710150903020084150025606782486579490225752163, 7278167622527482910919537896950398911672667355929695202886784227621290914468002099686668156909569183497765732237075799745632960354306268680765408194219074, 3334584846711780119716613440720851482199838919351927489954344426327712973616885459737471991960238971274273643566666607141850753561424427088261862873317161, 10418397794302836806813296591826255845845380563102199636140458670781241436466478273414138749593148481207713557016996462238845705251702717702279222414513227, 8928267741189301140931758366885435860144549752680480164627323600501278650103818630920534258909582593266779000356145650416276415560226176904904552964196921, 3371514716248416335324237152123624115597170761078576760713238311485522010416246207731778456501311675041827750001670698984335573888627309609534659722697174, 3802217515688979225517388823688564230191961273039428065604146662684362686419670392762755984078261072614619934671572327384351597903233780846163893180876244, 2363399549320749312563257796730356164186914867645487733176402567625567991193120859507532138374793392237469893062402307645814490930874653088116729203724851, 10221767730316631512882371487958453352895713655492241322139865275323706929127996334620105099751973217983332705204535216804829987329684674632121801754529472, 2309440702968799222696132507585555901684240893289264193546892279919675495689944211715270510347394465285317239758024734161176699837687742722383530547735726, 5768185970426887633783322939933762164095055854707759575404348181421158843802654199133776622565384843677610666356549368021172121302926969754865633752131083, 3229518654067354667224244723968136366109210341994628338992752927462431316675552817799465987425719486448276862390918033544772400219803600904202906882850710, 9261930571620802581580992489567043178258044978932724785185749415955521702331959591680386023118398455066896674799447994060060156036800986190467008880726445, 2202162000802916921896507108984564185119471354726317829850206292755815439071735424116041491064894922930900262540589602333676063925873357256494020426758849, 1449198886322850923273373987785167865779477069790726992542423846556138762913056524689998313112599261515223680429584445016474216381861998363527368722991846, 8372052560034461177472546395510480308837387803551378399004608402463282066003862653368875671946863748209051044725913651881213858335224750549176875818647614, 1554572177534183877889322947083536921680809086638640689433294150868422460719624621258231995856944045776876555664816113444481761122803489100212103150005950, 10304720995101153898600333216365877709018991122985401884049110267116778080162237155472336396606109372189653686733770775660895990549286854727042270667997449, 9702831715765050072649082617719386580543641764650576307262259428035281535816750758018451681417440458250169771442858047124693499821240155899358663466925522, 4983986466837077050816175727911146971276599399191126236666755181304580074902883995859030897874305902445659355326021836801836996577665092276845357389900055, 983210432268706135181772492997088637756153310076409721616450343187239073604891492532080986521255675448499887782529162112441952861587689660048849369850769]</span><br><span class="line">R = [8922553268219903948421811612403588317187402276064169063400419617931637566221670948925221403527928336656976084021780421068421112325215152715630319708159148, 1960697234007608888633325436691320507012497445090151112947144246088597317322303593936974554881161091213718329061011703885436579261559669838148253146762736, 5876944865176517279136475269375710514719489457672467542904948332791352244229042691977616905122711469012731652511966060550749288338599104284986451669586397, 10560136356360422684127995001096871178761635291417665630629868184624616925939841693017240341233504589896610287855672892399213367967385666891688408976236926, 477096251733995832965266836067676961413182629438628989729801411920869543083075545758386996801847267554704996660190900105380190625423846876906822024677634, 7001514955678391252130680521301315254365131738168087539892724691183104608345983375763663321467662055864103520121513349630333839818372656472731157470876337, 3894488356665934776074291789545516608573077899099880057920210752197885106521699021123658077208789295954145485399473386424677782787720074605813565437678385, 6084641463140385894120457093933350076091808742065950836200598466936433741373700151235571333073965513559605688011967994215074945374832957951384088589789549, 6429023674027239778212676334778900557043774851747196071499704016422574667955121145943674677254291410204037372996870181094090300709994594837656541352954321, 974464046378184190666336249935678253753198649184272269465353741281529523364289314148552833155935080422698020734516538377662137879089845095565536185765703, 5275384626572520577089146723078373110279682903874445477027602487061203157331398955233780208890725281673434536867800450553737656852356536771518379108118530, 7195767683001605593626199889963767438584070902169912442665828755648712278523740276132000225353756257232761885567134364203207306842108602537457408438487869, 1960155276835684836483043402384876176138942980630724993481564836712252228823186653467973806509964860286129730847244573674203959835565358735171611743573721, 6414607819273473402861616605113355396690170400984793217629732347141796693554056264547151212348354332930126795040213921009711560216969452391748438893237750, 3344964019305423035551401397282638905496921053458747459062023331678484337724980196690184898986671355848101101352105363764794975082772539709853216580762130, 5599385562588302350377616767130563945375472947459594912838322011021483641484084692396462025157944023828872267520122213089523093591160284337483108416804096, 9490045098551912983475126253859124028793327975874647810947095579199208473971726763051464010595903748080632329362605820021188148160826282120484098519748832, 980400922804123638777377509067942595214234592161404114303498013065244168965487370334832921426484278913774963761155003569793282819717667783351454812080994, 2772369382727364487748752144766350276094463435156818133766210304998890765120785013435379746537938377688617479112518505844159436213691418873590807740501183, 2338271137215119073302625621754099128003710500967811947590498668688826448575898279561111743087002717955161536157254689000474464404087443266193145449601031, 11773104862539842923315548180471993854469651503131148446111338098437913152663007837927793233931818835121946274135336436554801339749906320765919816150768, 7022131435585860015767289025786078578929344550873832550705723505006303288639135070849692494020122369694090619694760175970759059981608871097298624956669246, 9062158671807923729547552523768819638817707994079942965412925347441853183471973898478745711676153003756450481351777543455041815438536630317647408008349357, 641428039466528875429106458292463262780539744201857515833377175893334510962304373010401729801987725599439620073783868719664061882399367340158128062151780, 9636846145225909579086917154824161374486916920345217833190333031690359415616710658317308376119096253360425924297858397657697468296746934075225665559206030, 480796179229094678008918831581475398488769027287954488301969143979307355466114726392701279092691566949082439457297527772794149828193400419285116237063338, 7726757640854263742178678415761753342099387727318458723726925176786999799204056696883433346568600944559959849253863013300907357120126559055735593380638961, 551534415366550033034654093228329954588738781407008585088422737955391043381667720876717529438845777841508116853874405455280903517864352822604194884203656, 2135598634800053933515509095633720732412542790075717247869348997292949946344227105219967710854885153055617943193159899627517699960920415492992774438014041, 1680242449902645450228202409049382139482100876672724104665964994414865664877710770701122475977142858601068246748276652246938681740022531970523695731126206, 436320498659370791836085607479390848415464961245449366885835640616716752879866126057724425537944356751844317980881005608075886211154052092270888058429787, 4102523817041969170017113001399252035243358293719837916039521471412151711746047572340376418109842112515873700164747338421862615679590520014959369523777063]</span><br><span class="line">S = [4389820170235953517860364281419052587762385444517203945856665517072263529411621622474249480804818285716662154444854074939122170918939074730520091008754679, 10274488321950407401790238304858775303749809597573328350457719402010568443492374388509295355784873292280254116167747959663379913408799485392015111636115272, 7413556897779783875511997253964328306011661062497568739340607424890313315434489440969977560260194970241163209968988660276109536299848001455072705137702052, 10385679419514177727801069016719283683697529805734389950368725106396939072509839502286093730172215158898251533786500497578747904349856564856054102927847131, 6386209810414906928429352824399745808560059492214757951425372272591372428785367326567204502131184260857447725722068674542931096991341451850846209503213310, 699060860182347708294712482476262878008951502586470987307146194685783850677219935862211847525612405824474382122868643521962157410369483858428437433802395, 3482063900392942412450041046839813864192488604261419419162091087116878838189062406913587662602295096636481252242577251563441565388543873530900962308450590, 5752782775722534186844731777766684686828626762801341093006843547008915880093927377014105260314050196609699164926717998841388194942556402699285523644651583, 4477944786670422304592908174461368396168580171651041832449759231077050962444090886920563302603784981035116689839335069690875797644553684152368376089740517, 5663531682848751034979876476955107364567717396957230368140915480695954150088052156264521615690161327525898382714131905580517915060427960250740110846321921, 5343294510843224726960051115907810365241970373986845465490090821566645536683695042467985025063439338770116316455211944030125820601506874250685838077414765, 8432688027895892738831218358369397874948328355540048945541749304849571948638169902486647265119397307193449002927427840453857643697175667051504836511635801, 8974418251288081645329898313903422373193272601106837017923535786950979222125740970411725976034947989767143786286397290996756916960291029965672692318584390, 3367471493907450997862234076499110882206518716388236141312548251406626961838619595519805436447472248133422979102036617759221276869918910189482246041609756, 9787518698663334219763616437865759554315749369906898604904977007297368987715422535407542350049111845605011307829034744443271718643291528381794716569586150, 7423298611637442306439453382713995476685370148677494272333567929180589186347708172471032286209947149761644993151042408431548488945145292037694546868884030, 5591656321514817104832226351286824953278894430528912246855770091334337189386156994498331013600732669813560603667226878637404391237947398475280409452591013, 6425108527382412819259579180312607504985609322110590326058191420486308943785080395001318724782575187718535133704219706236946232717333616646838328259100174, 1986072520726417425427679478185786673218113837249425820170849864471171328875606626923270664642579676457285438864056080352157246995774517812392120146048999, 5085759490547346080963649291763871068034757573012867868532204864022791365366745839456310985148663327808561601274994541505734129506831803550600738607170703, 6883330982174382523423400136207766091739299571009207949454774998664997037115272990237878573502506026799645646664956134682833693219974019271740996314084220, 3008412285222633004812698063455902388460013611944185187747762649311442328686187279186972723448077521425052318221865300502697494418867793831761784796146329, 9547325670583212399117684599284936334790443591395268814958834705867928621240882386996085347052830889322724160452729359284992294890584292625829913315628265, 1387461799657365419593288084566026147529011675413652640829187706708872066267641962620159408303872024421411747751690792902149761832079721583778430712988299, 2093635222672050417361673475374966389314266702410603863643637918543784930893405832179904330416148995313591588929177333026382745340633946128791737631559286, 8413424329301946557805781268429552577339778139904799140486659388945506980343653897206690153402822892272378378085908749995513711021119914769801970795906117, 6743445162380434316634371637355512041805280159276931422012464596435558338432827675791139455542184532473287436049595748235961499758716697674776760822162391, 1706184129470213725753097073154985919221181897433450716898208607625832464228411992900434982560203334218404626447424408012817411257665032706434306723906871, 1188503046129710474378492502021666062040985983530761819828342979325166292485440608536173516789179154601587903599847267180858095017007891547798890802090080, 6398862094282462456834873185064362330936738060688527379705123125559724680574585721467123968313071365176318010618981170019917278363707049487278610027058585, 1827205671808118170959457466922915851906256049105694256301380823860317738339383848734269783842511423911532135506082729000044271560428423457063013176002958, 4296939764995860347968082436772567300063081379392577066061720737920992283479200350022263164173968370055486217109628430523063986426005741344085155171587948]</span><br><span class="line">C = [2312453804397990204892582347458673184184584053391181580849656202381982276483135032773767708029907426388840618138608941250788745829088238589339462137662516, 10523194306636352419831471584744199603299973937259007033119401866043123235256118686290774285411893111835433604432082195914308420845569896693674208644701928, 8625321422409900297730698589684636810222608572364004227411854906715574297306124060030713845833976664653817196364988412308992879167741430256046508164902265, 2203036357494864574281685606458518951592160562338358743010726696365683441724958156704554110208947394458113054047499157258753175446414976136008162642109757, 7440676439428237992864596387460092947449968530635365999432104198675297081825315672568959667296286389774687367936168132053293001589687795737604457160906082, 2264157050840270501520646271743213633490605461967539030408028006097728678459599299655371587125945029431528702214373899493252891890106222569122603386717360, 6089828885562252420652081197249651438359320954630388805129416420415135298321118452771481678140904854945253504361325478946359729157231808943846058944117026, 10539688120079451218718476929576210805778407047878263373562960368159158621424931104363627052374700437454925765616146962059684388174993415278124860987310938, 6303692164422236243124789748609418445914012315334563733630138248326249660310698584154622748275297380026916444293448955157206727703202478794453250926439643, 881942845076614931271891025655927553295291244201690295230440723375006916146507322259936249039275621554840488955637696630030022348109669072833863866985225, 10106348190249831893088197931090851286229747534150777530156601113972916238286905365616240501204440809598108220364456446320022747806334510176621958436096123, 8324531392881516178541244041903222514911964835924579628962940318936570586739198442236357026438613345385230182029810965182157993322744038688573053225547374, 5078708553426349749719952343873018594648548601008242439539543130067536764970709366523519348572603124221309659983256536103306454063139670063244331611755453, 8542547993117228744822361667182819410791296436924016725757178153507707272004493213120780743910507865839367749205817741703451968423781285521621014600059589, 3073352723766074586873446203285051955281142348730058300259816322651361605792426446390729367386148254808552616968786890277451301146248756651016086606742804, 5269945451683706496607356863109615383647000556701922770404180133092195426319754674753614204346587769298246334991876508268642550219392732660290378353338400, 6262348731181694593163187372863680743743096474259867989757989072530511417286900866334036812204673457159090130621478933266270029789176903023636735673595513, 3297899863181037954379261853482229450757449782777910450819629975965660022355584717412057615899333569245281976118829898854119850433763380827003244277020101, 7487260566995972228255217362172107520309457024141075543923988636564806307827017535285595701845830793533604534902349660541692391232785351590333159515799384, 10324279404125558600858330541468243667961239247663241031255287540601841176203292036413076990028875224629890818418992943759206077129550049357885152924273782, 8044925106089251438446731137002808317322635126054485149617494154471416674741758172633019611642437845768869330746423337854351186668227486117398013073824286, 4234270952814400783009242730655483882561531800274439758860142245952005010632014464198770218689605527760730047723966950012227395838571254801244673898812828, 638896609043108497262778277770178050665854883307447937008504779907661322405672174519391657570064336725509768185637608044022219246206471015980252602095129, 5180216795602211214280366461349507739255238657924206736673167715462995927060334503420979145327254053283011116720223275075476559911219732336496503542596869, 4889582376915206124736222022750168286228699065224704085027955184917144323557844593386817223260498520607466742269645929630472738644444652704289510157100913, 5012604326308554636339480431591200785633930724891396744558818436357664982175033998281443810436271724799610836412819040278374041390604150781759163613994682, 3219038638665180576932584279254771209098300305384572525709292133614238552451580810601286362213655499134538083785424726484119059950676285763438331520089227, 6419694420004223063062285264931096360778228156157853232796125041025067958687740255716444718822744614217377927689465894996156144384079594697465808095114901, 9910546009146267464166501179537825349776178695164070160517872596078275117785713000045215455672195660329319962408970209137481672915542900445933477806115760, 1420603945244588398788478464408905133932325733716125030735921688979482121297328679317495694245547716568441401137633433150951713462958551532394178628021900, 6208847506587273852328049116772424002595270959861992270025537759079430511161476024600259347318966551584005222005704567718008394909230998308545154993159673, 10385926333158107236552504228168776101396372491461292301486697050842973861408756486936932908479675556344542947425765714101814836237112561730341100901890350]</span><br></pre></td></tr></table></figure><p>题目给了d组如下等式：</p><script type="math/tex; mode=display">c_i = Q_im + r_iR_i + s_iS_i\quad (\text{mod } p)</script><p>c、Q、R、S均已知，要求还原m。同时，每次的$r_i$、$s_i$都是d bit的数，p是512bit。</p><p>由列表长度可以知道d就是32，所以r、s都是很小的量，因此自然想到消去m做一个HNP。取第0组和第1组的等式统一$m$$的系数然后做差即可:</p><script type="math/tex; mode=display">c_0 = Q_0m + r_0R_0 + s_0S_0\quad (\text{mod } p)</script><script type="math/tex; mode=display">c_i = Q_im + r_iR_i + s_iS_i\quad (\text{mod } p)</script><script type="math/tex; mode=display">Q_ic_0 = Q_iQ_0m + r_0Q_iR_0 + s_0Q_iS_0\quad (\text{mod } p)</script><script type="math/tex; mode=display">Q_0c_i = Q_0Q_im + r_iQ_0R_i + s_iQ_0S_i\quad (\text{mod } p)</script><p>到这就消去了m，造个格子求一下u和v即可, 这里由于u和v太小了所以一组就能求出来，正常需要多组才会准确。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line">d = int(sqrt(512 &lt;&lt; 1))</span><br><span class="line">p = 10580731215444436219213907263947534038012197972307836319229421193761088798378768844649759133142120180834573817149711299466707823017636232456526471274387917</span><br><span class="line">Q = [6718668664591596190749745980002066645380242844394957953766947533978323053938214647829798301606252456858132121628517723050462291300790766055200866765561610, 8738840830394886495658505803088103824478963010774845789433253508554356383249611502157307334585157729703873877797759121271071421201959116272886732798936523, 4388762712805764363921857352899834586382140923234814556069490536704913653848525595836491615636446563386705915348021173847271741862809075809151508973332816, 3663706247989213864330218414789109172658418861584264092087052781618522795676355371739296186667918464732397854703792563460353675590182379535358561615166754, 10397730940373180549512945920847346184926672474430866208628825035104473525758952069910968144296138220861205803231072660136999110567752870928953292888013817, 7950983396364741732874562189206547723862955251595526752956177377987683115942827501152009639962778147887569469649852864894630521759276627026901168996371682, 4533165373271154956275563812280832107592547920299130443910706773435844651231402604986107252454770256826684895729900344877444002682896222483157835711226276, 234527648838985018479849393379369972316648524004050156622962478277970628212208049885578895953447529009579881605066831810617219492342569126524704457098602, 870946394610707169333783318085559836426827503011955242395779894700298192587685130680102208909573921059078858816359885827349281892186755920839352494224983, 5025393101560564396356619431938053414422489109406396725377683594254768077793838379117179092536396259414266971990125716674162127500490058572594571364978294, 5914192169617888877888201158713062853387719050723973971874176184801960297380845845091259990664210178355882621876155306106794686897854891414999449337977781, 2315609284318723939818174971181608382568372323836754133265010413836452399043354382657889810068171230196496294710150903020084150025606782486579490225752163, 7278167622527482910919537896950398911672667355929695202886784227621290914468002099686668156909569183497765732237075799745632960354306268680765408194219074, 3334584846711780119716613440720851482199838919351927489954344426327712973616885459737471991960238971274273643566666607141850753561424427088261862873317161, 10418397794302836806813296591826255845845380563102199636140458670781241436466478273414138749593148481207713557016996462238845705251702717702279222414513227, 8928267741189301140931758366885435860144549752680480164627323600501278650103818630920534258909582593266779000356145650416276415560226176904904552964196921, 3371514716248416335324237152123624115597170761078576760713238311485522010416246207731778456501311675041827750001670698984335573888627309609534659722697174, 3802217515688979225517388823688564230191961273039428065604146662684362686419670392762755984078261072614619934671572327384351597903233780846163893180876244, 2363399549320749312563257796730356164186914867645487733176402567625567991193120859507532138374793392237469893062402307645814490930874653088116729203724851, 10221767730316631512882371487958453352895713655492241322139865275323706929127996334620105099751973217983332705204535216804829987329684674632121801754529472, 2309440702968799222696132507585555901684240893289264193546892279919675495689944211715270510347394465285317239758024734161176699837687742722383530547735726, 5768185970426887633783322939933762164095055854707759575404348181421158843802654199133776622565384843677610666356549368021172121302926969754865633752131083, 3229518654067354667224244723968136366109210341994628338992752927462431316675552817799465987425719486448276862390918033544772400219803600904202906882850710, 9261930571620802581580992489567043178258044978932724785185749415955521702331959591680386023118398455066896674799447994060060156036800986190467008880726445, 2202162000802916921896507108984564185119471354726317829850206292755815439071735424116041491064894922930900262540589602333676063925873357256494020426758849, 1449198886322850923273373987785167865779477069790726992542423846556138762913056524689998313112599261515223680429584445016474216381861998363527368722991846, 8372052560034461177472546395510480308837387803551378399004608402463282066003862653368875671946863748209051044725913651881213858335224750549176875818647614, 1554572177534183877889322947083536921680809086638640689433294150868422460719624621258231995856944045776876555664816113444481761122803489100212103150005950, 10304720995101153898600333216365877709018991122985401884049110267116778080162237155472336396606109372189653686733770775660895990549286854727042270667997449, 9702831715765050072649082617719386580543641764650576307262259428035281535816750758018451681417440458250169771442858047124693499821240155899358663466925522, 4983986466837077050816175727911146971276599399191126236666755181304580074902883995859030897874305902445659355326021836801836996577665092276845357389900055, 983210432268706135181772492997088637756153310076409721616450343187239073604891492532080986521255675448499887782529162112441952861587689660048849369850769]</span><br><span class="line">R = [8922553268219903948421811612403588317187402276064169063400419617931637566221670948925221403527928336656976084021780421068421112325215152715630319708159148, 1960697234007608888633325436691320507012497445090151112947144246088597317322303593936974554881161091213718329061011703885436579261559669838148253146762736, 5876944865176517279136475269375710514719489457672467542904948332791352244229042691977616905122711469012731652511966060550749288338599104284986451669586397, 10560136356360422684127995001096871178761635291417665630629868184624616925939841693017240341233504589896610287855672892399213367967385666891688408976236926, 477096251733995832965266836067676961413182629438628989729801411920869543083075545758386996801847267554704996660190900105380190625423846876906822024677634, 7001514955678391252130680521301315254365131738168087539892724691183104608345983375763663321467662055864103520121513349630333839818372656472731157470876337, 3894488356665934776074291789545516608573077899099880057920210752197885106521699021123658077208789295954145485399473386424677782787720074605813565437678385, 6084641463140385894120457093933350076091808742065950836200598466936433741373700151235571333073965513559605688011967994215074945374832957951384088589789549, 6429023674027239778212676334778900557043774851747196071499704016422574667955121145943674677254291410204037372996870181094090300709994594837656541352954321, 974464046378184190666336249935678253753198649184272269465353741281529523364289314148552833155935080422698020734516538377662137879089845095565536185765703, 5275384626572520577089146723078373110279682903874445477027602487061203157331398955233780208890725281673434536867800450553737656852356536771518379108118530, 7195767683001605593626199889963767438584070902169912442665828755648712278523740276132000225353756257232761885567134364203207306842108602537457408438487869, 1960155276835684836483043402384876176138942980630724993481564836712252228823186653467973806509964860286129730847244573674203959835565358735171611743573721, 6414607819273473402861616605113355396690170400984793217629732347141796693554056264547151212348354332930126795040213921009711560216969452391748438893237750, 3344964019305423035551401397282638905496921053458747459062023331678484337724980196690184898986671355848101101352105363764794975082772539709853216580762130, 5599385562588302350377616767130563945375472947459594912838322011021483641484084692396462025157944023828872267520122213089523093591160284337483108416804096, 9490045098551912983475126253859124028793327975874647810947095579199208473971726763051464010595903748080632329362605820021188148160826282120484098519748832, 980400922804123638777377509067942595214234592161404114303498013065244168965487370334832921426484278913774963761155003569793282819717667783351454812080994, 2772369382727364487748752144766350276094463435156818133766210304998890765120785013435379746537938377688617479112518505844159436213691418873590807740501183, 2338271137215119073302625621754099128003710500967811947590498668688826448575898279561111743087002717955161536157254689000474464404087443266193145449601031, 11773104862539842923315548180471993854469651503131148446111338098437913152663007837927793233931818835121946274135336436554801339749906320765919816150768, 7022131435585860015767289025786078578929344550873832550705723505006303288639135070849692494020122369694090619694760175970759059981608871097298624956669246, 9062158671807923729547552523768819638817707994079942965412925347441853183471973898478745711676153003756450481351777543455041815438536630317647408008349357, 641428039466528875429106458292463262780539744201857515833377175893334510962304373010401729801987725599439620073783868719664061882399367340158128062151780, 9636846145225909579086917154824161374486916920345217833190333031690359415616710658317308376119096253360425924297858397657697468296746934075225665559206030, 480796179229094678008918831581475398488769027287954488301969143979307355466114726392701279092691566949082439457297527772794149828193400419285116237063338, 7726757640854263742178678415761753342099387727318458723726925176786999799204056696883433346568600944559959849253863013300907357120126559055735593380638961, 551534415366550033034654093228329954588738781407008585088422737955391043381667720876717529438845777841508116853874405455280903517864352822604194884203656, 2135598634800053933515509095633720732412542790075717247869348997292949946344227105219967710854885153055617943193159899627517699960920415492992774438014041, 1680242449902645450228202409049382139482100876672724104665964994414865664877710770701122475977142858601068246748276652246938681740022531970523695731126206, 436320498659370791836085607479390848415464961245449366885835640616716752879866126057724425537944356751844317980881005608075886211154052092270888058429787, 4102523817041969170017113001399252035243358293719837916039521471412151711746047572340376418109842112515873700164747338421862615679590520014959369523777063]</span><br><span class="line">S = [4389820170235953517860364281419052587762385444517203945856665517072263529411621622474249480804818285716662154444854074939122170918939074730520091008754679, 10274488321950407401790238304858775303749809597573328350457719402010568443492374388509295355784873292280254116167747959663379913408799485392015111636115272, 7413556897779783875511997253964328306011661062497568739340607424890313315434489440969977560260194970241163209968988660276109536299848001455072705137702052, 10385679419514177727801069016719283683697529805734389950368725106396939072509839502286093730172215158898251533786500497578747904349856564856054102927847131, 6386209810414906928429352824399745808560059492214757951425372272591372428785367326567204502131184260857447725722068674542931096991341451850846209503213310, 699060860182347708294712482476262878008951502586470987307146194685783850677219935862211847525612405824474382122868643521962157410369483858428437433802395, 3482063900392942412450041046839813864192488604261419419162091087116878838189062406913587662602295096636481252242577251563441565388543873530900962308450590, 5752782775722534186844731777766684686828626762801341093006843547008915880093927377014105260314050196609699164926717998841388194942556402699285523644651583, 4477944786670422304592908174461368396168580171651041832449759231077050962444090886920563302603784981035116689839335069690875797644553684152368376089740517, 5663531682848751034979876476955107364567717396957230368140915480695954150088052156264521615690161327525898382714131905580517915060427960250740110846321921, 5343294510843224726960051115907810365241970373986845465490090821566645536683695042467985025063439338770116316455211944030125820601506874250685838077414765, 8432688027895892738831218358369397874948328355540048945541749304849571948638169902486647265119397307193449002927427840453857643697175667051504836511635801, 8974418251288081645329898313903422373193272601106837017923535786950979222125740970411725976034947989767143786286397290996756916960291029965672692318584390, 3367471493907450997862234076499110882206518716388236141312548251406626961838619595519805436447472248133422979102036617759221276869918910189482246041609756, 9787518698663334219763616437865759554315749369906898604904977007297368987715422535407542350049111845605011307829034744443271718643291528381794716569586150, 7423298611637442306439453382713995476685370148677494272333567929180589186347708172471032286209947149761644993151042408431548488945145292037694546868884030, 5591656321514817104832226351286824953278894430528912246855770091334337189386156994498331013600732669813560603667226878637404391237947398475280409452591013, 6425108527382412819259579180312607504985609322110590326058191420486308943785080395001318724782575187718535133704219706236946232717333616646838328259100174, 1986072520726417425427679478185786673218113837249425820170849864471171328875606626923270664642579676457285438864056080352157246995774517812392120146048999, 5085759490547346080963649291763871068034757573012867868532204864022791365366745839456310985148663327808561601274994541505734129506831803550600738607170703, 6883330982174382523423400136207766091739299571009207949454774998664997037115272990237878573502506026799645646664956134682833693219974019271740996314084220, 3008412285222633004812698063455902388460013611944185187747762649311442328686187279186972723448077521425052318221865300502697494418867793831761784796146329, 9547325670583212399117684599284936334790443591395268814958834705867928621240882386996085347052830889322724160452729359284992294890584292625829913315628265, 1387461799657365419593288084566026147529011675413652640829187706708872066267641962620159408303872024421411747751690792902149761832079721583778430712988299, 2093635222672050417361673475374966389314266702410603863643637918543784930893405832179904330416148995313591588929177333026382745340633946128791737631559286, 8413424329301946557805781268429552577339778139904799140486659388945506980343653897206690153402822892272378378085908749995513711021119914769801970795906117, 6743445162380434316634371637355512041805280159276931422012464596435558338432827675791139455542184532473287436049595748235961499758716697674776760822162391, 1706184129470213725753097073154985919221181897433450716898208607625832464228411992900434982560203334218404626447424408012817411257665032706434306723906871, 1188503046129710474378492502021666062040985983530761819828342979325166292485440608536173516789179154601587903599847267180858095017007891547798890802090080, 6398862094282462456834873185064362330936738060688527379705123125559724680574585721467123968313071365176318010618981170019917278363707049487278610027058585, 1827205671808118170959457466922915851906256049105694256301380823860317738339383848734269783842511423911532135506082729000044271560428423457063013176002958, 4296939764995860347968082436772567300063081379392577066061720737920992283479200350022263164173968370055486217109628430523063986426005741344085155171587948]</span><br><span class="line">C = [2312453804397990204892582347458673184184584053391181580849656202381982276483135032773767708029907426388840618138608941250788745829088238589339462137662516, 10523194306636352419831471584744199603299973937259007033119401866043123235256118686290774285411893111835433604432082195914308420845569896693674208644701928, 8625321422409900297730698589684636810222608572364004227411854906715574297306124060030713845833976664653817196364988412308992879167741430256046508164902265, 2203036357494864574281685606458518951592160562338358743010726696365683441724958156704554110208947394458113054047499157258753175446414976136008162642109757, 7440676439428237992864596387460092947449968530635365999432104198675297081825315672568959667296286389774687367936168132053293001589687795737604457160906082, 2264157050840270501520646271743213633490605461967539030408028006097728678459599299655371587125945029431528702214373899493252891890106222569122603386717360, 6089828885562252420652081197249651438359320954630388805129416420415135298321118452771481678140904854945253504361325478946359729157231808943846058944117026, 10539688120079451218718476929576210805778407047878263373562960368159158621424931104363627052374700437454925765616146962059684388174993415278124860987310938, 6303692164422236243124789748609418445914012315334563733630138248326249660310698584154622748275297380026916444293448955157206727703202478794453250926439643, 881942845076614931271891025655927553295291244201690295230440723375006916146507322259936249039275621554840488955637696630030022348109669072833863866985225, 10106348190249831893088197931090851286229747534150777530156601113972916238286905365616240501204440809598108220364456446320022747806334510176621958436096123, 8324531392881516178541244041903222514911964835924579628962940318936570586739198442236357026438613345385230182029810965182157993322744038688573053225547374, 5078708553426349749719952343873018594648548601008242439539543130067536764970709366523519348572603124221309659983256536103306454063139670063244331611755453, 8542547993117228744822361667182819410791296436924016725757178153507707272004493213120780743910507865839367749205817741703451968423781285521621014600059589, 3073352723766074586873446203285051955281142348730058300259816322651361605792426446390729367386148254808552616968786890277451301146248756651016086606742804, 5269945451683706496607356863109615383647000556701922770404180133092195426319754674753614204346587769298246334991876508268642550219392732660290378353338400, 6262348731181694593163187372863680743743096474259867989757989072530511417286900866334036812204673457159090130621478933266270029789176903023636735673595513, 3297899863181037954379261853482229450757449782777910450819629975965660022355584717412057615899333569245281976118829898854119850433763380827003244277020101, 7487260566995972228255217362172107520309457024141075543923988636564806307827017535285595701845830793533604534902349660541692391232785351590333159515799384, 10324279404125558600858330541468243667961239247663241031255287540601841176203292036413076990028875224629890818418992943759206077129550049357885152924273782, 8044925106089251438446731137002808317322635126054485149617494154471416674741758172633019611642437845768869330746423337854351186668227486117398013073824286, 4234270952814400783009242730655483882561531800274439758860142245952005010632014464198770218689605527760730047723966950012227395838571254801244673898812828, 638896609043108497262778277770178050665854883307447937008504779907661322405672174519391657570064336725509768185637608044022219246206471015980252602095129, 5180216795602211214280366461349507739255238657924206736673167715462995927060334503420979145327254053283011116720223275075476559911219732336496503542596869, 4889582376915206124736222022750168286228699065224704085027955184917144323557844593386817223260498520607466742269645929630472738644444652704289510157100913, 5012604326308554636339480431591200785633930724891396744558818436357664982175033998281443810436271724799610836412819040278374041390604150781759163613994682, 3219038638665180576932584279254771209098300305384572525709292133614238552451580810601286362213655499134538083785424726484119059950676285763438331520089227, 6419694420004223063062285264931096360778228156157853232796125041025067958687740255716444718822744614217377927689465894996156144384079594697465808095114901, 9910546009146267464166501179537825349776178695164070160517872596078275117785713000045215455672195660329319962408970209137481672915542900445933477806115760, 1420603945244588398788478464408905133932325733716125030735921688979482121297328679317495694245547716568441401137633433150951713462958551532394178628021900, 6208847506587273852328049116772424002595270959861992270025537759079430511161476024600259347318966551584005222005704567718008394909230998308545154993159673, 10385926333158107236552504228168776101396372491461292301486697050842973861408756486936932908479675556344542947425765714101814836237112561730341100901890350]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">j = 1</span><br><span class="line">M = matrix(ZZ, [[1, 0, 0, 0, 0,                 R[i] * Q[j] % p],</span><br><span class="line">                [0, 1, 0, 0, 0,                 S[i] * Q[j] % p],</span><br><span class="line">                [0, 0, 1, 0, 0,                -R[j] * Q[i] % p],</span><br><span class="line">                [0, 0, 0, 1, 0,                -S[j] * Q[i] % p],</span><br><span class="line">                [0, 0, 0, 0, 1, (C[i] * Q[j] - C[j] * Q[i]) % p],</span><br><span class="line">                [0, 0, 0, 0, 0,                               p]])</span><br><span class="line"></span><br><span class="line">L = M * diagonal_matrix([1, 1, 1, 1, 2^32, 2^32])</span><br><span class="line"></span><br><span class="line">v = L.LLL()[0]</span><br><span class="line">ui, vi = map(abs, (v[0], v[1]))</span><br><span class="line">m = (C[i] - R[i] * ui - S[i] * vi) * inverse_mod(Q[i], p) % p</span><br><span class="line">print(long_to_bytes(int(m)))</span><br></pre></td></tr></table></figure><h2 id="Joe-19"><a href="#Joe-19" class="headerlink" title="Joe-19"></a>Joe-19</h2><p>题目描述：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Joe-19 is a cryptographic system that leverages a top-secret version of GPT AI technology to develop advanced and robust cryptographic tools.</span><br></pre></td></tr></table></figure><br>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sage</span><br><span class="line"></span><br><span class="line">from GPT import GPT6 # deep fake </span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">P = [GPT6(&#x27;A 512-bit prime appears in consecutive digits of e&#x27;) for _ in range(4)]</span><br><span class="line">n, m = prod(P), bytes_to_long(flag)</span><br><span class="line">c = pow(m, 0x10001, n)</span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>output.txt：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = 8098851734937207931222242323719278262039311278408396153102939840336549151541408692581651429325092535316359074019383926520363453725271849258924996783681725111665666420297112252565291898169877088446887149672943461236879128453847442584868198963005276340812322871768679441501282681171263391133217373094824601748838255306528243603493400515452224778867670063040337191204276832576625227337670689681430055765023322478267339944312535862682499007423158988134472889946113994555274385595499503495488202251032898470224056637967019786473820952632846823442509236976892995505554046850101313269847925347047514591030406052185186963433</span><br><span class="line">c = 7109666883988892105091816608945789114105575520302872143453259352879355990908149124303310269223886289484842913063773914475282456079383409262649058768777227206800315566373109284537693635270488429501591721126853086090237488579840160957328710017268493911400151764046320861154478494943928510792105098343926542515526432005970840321142196894715037239909959538873866099850417570975505565638622448664580282210383639403173773002795595142150433695880167315674091756597784809792396452578104130341085213443116999368555639128246707794076354522200892568943534878523445909591352323861659891882091917178199085781803940677425823784662</span><br></pre></td></tr></table></figure></p><p>预期应该是通过枚举自然对数e的连续bit去找到对应素数，但是</p><p><img src="https://source.yizhixiaojiuli.cn/img/2024-cryptoctf/Joe-19-1.png" alt="factordb分解"></p><p><a href="https://factordb.com/">https://factordb.com/</a> 直接分解了那就没啥可说得了直接解RSA即可</p><p>exp:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 8098851734937207931222242323719278262039311278408396153102939840336549151541408692581651429325092535316359074019383926520363453725271849258924996783681725111665666420297112252565291898169877088446887149672943461236879128453847442584868198963005276340812322871768679441501282681171263391133217373094824601748838255306528243603493400515452224778867670063040337191204276832576625227337670689681430055765023322478267339944312535862682499007423158988134472889946113994555274385595499503495488202251032898470224056637967019786473820952632846823442509236976892995505554046850101313269847925347047514591030406052185186963433</span><br><span class="line">c = 7109666883988892105091816608945789114105575520302872143453259352879355990908149124303310269223886289484842913063773914475282456079383409262649058768777227206800315566373109284537693635270488429501591721126853086090237488579840160957328710017268493911400151764046320861154478494943928510792105098343926542515526432005970840321142196894715037239909959538873866099850417570975505565638622448664580282210383639403173773002795595142150433695880167315674091756597784809792396452578104130341085213443116999368555639128246707794076354522200892568943534878523445909591352323861659891882091917178199085781803940677425823784662</span><br><span class="line"></span><br><span class="line">p = 7728751393377105569802455757436190501772466214587592374418657530064998056688376964229825501195065837843125232135309371235243969149662310110328243570065781</span><br><span class="line">q = 9688632098638681429535439991332657144752666147923336383829750592576742104399942931057096761773496510622226977570278994077236841491368959008277469453600569</span><br><span class="line">r = 10019005372961705640183251650710051163228093250949727357306333102512304273058618645339800283588040423877666492199352609508401454089083503146788384653241593</span><br><span class="line">s = 10795109107229646654467923653403055635071360620150038008453082390943756377071343139771120080956310498862485323957447467376538994662280143050510681877597429</span><br><span class="line"></span><br><span class="line">m = pow(c, inverse(65537,(p-1)*(q-1)*(r-1)*(s-1)), n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure></p><h2 id="Melek"><a href="#Melek" class="headerlink" title="Melek"></a>Melek</h2><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Melek is a secret sharing scheme that may be relatively straightforward to break - what are your thoughts on the best way to approach it?</span><br></pre></td></tr></table></figure><p>题目：</p>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-强网杯-crypto-wp</title>
      <link href="/2024/12/03/2024-%E5%BC%BA%E7%BD%91%E6%9D%AF-crypto-wp/"/>
      <url>/2024/12/03/2024-%E5%BC%BA%E7%BD%91%E6%9D%AF-crypto-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="EasyRSA"><a href="#EasyRSA" class="headerlink" title="EasyRSA"></a>EasyRSA</h2><p>题目描述：</p><pre><code>easy的RSA。</code></pre><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#encoding:utf-8</span><br><span class="line">from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime</span><br><span class="line">import random, gmpy2</span><br><span class="line"></span><br><span class="line">class RSAEncryptor:</span><br><span class="line">def __init__(self):</span><br><span class="line">self.g = self.a = self.b = 0</span><br><span class="line">self.e = 65537</span><br><span class="line">self.factorGen()</span><br><span class="line">self.product()</span><br><span class="line"></span><br><span class="line">def factorGen(self):</span><br><span class="line">while True:</span><br><span class="line">self.g = getPrime(500)</span><br><span class="line">while not gmpy2.is_prime(2*self.g*self.a+1):</span><br><span class="line">self.a = random.randint(2**523, 2**524)</span><br><span class="line">while not gmpy2.is_prime(2*self.g*self.b+1):</span><br><span class="line">self.b = random.randint(2**523, 2**524)</span><br><span class="line">self.h = 2*self.g*self.a*self.b+self.a+self.b</span><br><span class="line">if gmpy2.is_prime(self.h):</span><br><span class="line">self.N = 2*self.h*self.g+1</span><br><span class="line">print(len(bin(self.N)))</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">def encrypt(self, msg):</span><br><span class="line">return gmpy2.powmod(msg, self.e, self.N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def product(self):</span><br><span class="line">with open(&#x27;/flag&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">self.flag = f.read()</span><br><span class="line">self.enc = self.encrypt(self.flag)</span><br><span class="line">self.show()</span><br><span class="line">print(f&#x27;enc=&#123;self.enc&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">def show(self):</span><br><span class="line">print(f&quot;N=&#123;self.N&#125;&quot;)</span><br><span class="line">print(f&quot;e=&#123;self.e&#125;&quot;)</span><br><span class="line">print(f&quot;g=&#123;self.g&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RSAEncryptor()</span><br></pre></td></tr></table></figure><p>其中有：</p><pre><code>            p = 2ga + 1            q = 2gb + 1</code></pre><p>很明显的Common Prime RSA攻击,又因为泄露了g，找到解密脚本直接套用即可</p><p><a href="https://hasegawaazusa.github.io/common-prime-rsa.html#%E5%B7%B2%E7%9F%A5-g" style="color: blue; text-decoration: underline;">Common Prime RSA 笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p><p>因为这个博客的时间有点久了，sage版本比较老，bags的参数有点问题，参考sage的官方文档改一下bsgs参数就好。</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">n=18609249586511447022929188601029606630816796460795187470065452150283160549624372398383148374249992521068549349516037511009027303530058706112191091689108542770802393390942693648814845389265858611340109158309645284100825624911741650444467173946569096983438455034895955228543351436008546035535031019474847660151534447157873386841134028651786166708821300066332734338450150803713659027324704224480646285707278634645234095122804559045312923819794776928194098487972764363649361713512731460059740929840789043447155551107435766468071813945331313861835289050624825980714650042186547867057986370794200778277570803957071502251887</span><br><span class="line">e=65537</span><br><span class="line">g=2157382166227048008151606160068683153029902706798753603550075684775242674106840467207794609506075603345430902709796320595040305496549488048759451499003</span><br><span class="line">enc=1706676139782916859705617140716929473350550599143215409850324617375385155893376548401557158261122335220199922229225746433590875391358929714141838314015655361989993985070285957305126847445442699828095001203266978036575956723172054402632901673504599481917025056824986547174258708944098866240451432510310007060414500907941107101001004474036283249456230343043785187819423163986135104740039129111213967847515011092231384245986891933365405336421413444499204268699546739391271911481490278065027465465222639265899471823742196086481403499948301061349936225773314002398442541447810628796808530412232638250097430811300924120316</span><br><span class="line">gamma = 500/(1024*2)</span><br><span class="line">cbits = ceil(nbits * (0.5 - 2 * gamma))</span><br><span class="line"></span><br><span class="line">M = (N - 1) // (2 * g)</span><br><span class="line">u = M // (2 * g)</span><br><span class="line">v = M - 2 * g * u</span><br><span class="line">GF = Zmod(N)</span><br><span class="line">x = GF.random_element()</span><br><span class="line">y = x ^ (2 * g)</span><br><span class="line">#c的范围大概与N^(0.5-2*gamma)很接近</span><br><span class="line">c = bsgs(y, y ^ u, (2**(cbits-1), 2**(cbits+1)), operation=&#x27;*&#x27;)</span><br><span class="line">#(a, b, bounds, operation=&#x27;*&#x27;, identity=None, inverse=None, op=None)</span><br><span class="line">ab = u - c</span><br><span class="line">apb = v + 2 * g * c</span><br><span class="line">P.&lt;x&gt; = ZZ[]</span><br><span class="line">f = x ^ 2 - apb * x + ab</span><br><span class="line">a = f.roots()</span><br><span class="line">if a:</span><br><span class="line">    a, b = a[0][0], a[1][0]</span><br><span class="line">    p = 2 * g * a + 1</span><br><span class="line">    q = 2 * g * b + 1</span><br><span class="line">    assert p * q == N</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">print(long_to_bytes(int(pow(enc,inverse(e,(p-1)*(q-1)),n))))</span><br></pre></td></tr></table></figure><h2 id="apbq"><a href="#apbq" class="headerlink" title="apbq"></a>apbq</h2><p>题目描述：</p><pre><code>I obtained several sets of ap + bq through channel measurement. Can you solve it?</code></pre><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from secrets import flag</span><br><span class="line">from math import ceil</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class RSA():</span><br><span class="line">    def __init__(self, privatekey, publickey):</span><br><span class="line">        self.p, self.q, self.d = privatekey</span><br><span class="line">        self.n, self.e = publickey</span><br><span class="line"></span><br><span class="line">    def encrypt(self, plaintext):</span><br><span class="line">        if isinstance(plaintext, bytes):</span><br><span class="line">            plaintext = bytes_to_long(plaintext)</span><br><span class="line">        ciphertext = pow(plaintext, self.e, self.n)</span><br><span class="line">        return ciphertext</span><br><span class="line"></span><br><span class="line">    def decrypt(self, ciphertext):</span><br><span class="line">        if isinstance(ciphertext, bytes):</span><br><span class="line">            ciphertext = bytes_to_long(ciphertext)</span><br><span class="line">        plaintext = pow(ciphertext, self.d, self.n)</span><br><span class="line">        return plaintext</span><br><span class="line"></span><br><span class="line">def get_keypair(nbits, e = 65537):</span><br><span class="line">    p = getPrime(nbits//2)</span><br><span class="line">    q = getPrime(nbits//2)</span><br><span class="line">    n = p * q</span><br><span class="line">    d = inverse(e, n - p - q + 1)</span><br><span class="line">    return (p, q, d), (n, e)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pt = &#x27;./output.txt&#x27;</span><br><span class="line">    fout = open(pt, &#x27;w&#x27;)</span><br><span class="line">    sys.stdout = fout</span><br><span class="line"></span><br><span class="line">    block_size = ceil(len(flag)/3)</span><br><span class="line">    flag = [flag[i:i+block_size] for i in range(0, len(flag), block_size)]</span><br><span class="line">    e = 65537</span><br><span class="line"></span><br><span class="line">    print(f&#x27;[+] Welcome to my apbq game&#x27;)</span><br><span class="line">    # stage 1</span><br><span class="line">    print(f&#x27;┃ stage 1: p + q&#x27;)</span><br><span class="line">    prikey1, pubkey1 = get_keypair(1024)</span><br><span class="line">    RSA1 = RSA(prikey1, pubkey1)</span><br><span class="line">    enc1 = RSA1.encrypt(flag[0])</span><br><span class="line">    print(f&#x27;┃ hints = &#123;prikey1[0] + prikey1[1]&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ public key = &#123;pubkey1&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ enc1 = &#123;enc1&#125;&#x27;)</span><br><span class="line">    print(f&#x27;----------------------&#x27;)</span><br><span class="line"></span><br><span class="line">    # stage 2</span><br><span class="line">    print(f&#x27;┃ stage 2: ai*p + bi*q&#x27;)</span><br><span class="line">    prikey2, pubkey2 = get_keypair(1024)</span><br><span class="line">    RSA2 = RSA(prikey2, pubkey2)</span><br><span class="line">    enc2 = RSA2.encrypt(flag[1])</span><br><span class="line">    kbits = 180</span><br><span class="line">    a = [getRandomNBitInteger(kbits) for i in range(100)]</span><br><span class="line">    b = [getRandomNBitInteger(kbits) for i in range(100)]</span><br><span class="line">    c = [a[i]*prikey2[0] + b[i]*prikey2[1] for i in range(100)]</span><br><span class="line">    print(f&#x27;┃ hints = &#123;c&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ public key = &#123;pubkey2&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ enc2 = &#123;enc2&#125;&#x27;)</span><br><span class="line">    print(f&#x27;----------------------&#x27;)</span><br><span class="line"></span><br><span class="line">    # stage 3</span><br><span class="line">    print(f&#x27;┃ stage 3: a*p + q, p + bq&#x27;)</span><br><span class="line">    prikey3, pubkey3 = get_keypair(1024)</span><br><span class="line">    RSA3 = RSA(prikey3, pubkey3)</span><br><span class="line">    enc3 = RSA2.encrypt(flag[2])</span><br><span class="line">    kbits = 512</span><br><span class="line">    a = getRandomNBitInteger(kbits)</span><br><span class="line">    b = getRandomNBitInteger(kbits)</span><br><span class="line">    c1 = a*prikey3[0] + prikey3[1]</span><br><span class="line">    c2 = prikey3[0] + b*prikey3[1] </span><br><span class="line">    print(f&#x27;┃ hints = &#123;c1, c2&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ public key = &#123;pubkey3&#125;&#x27;)</span><br><span class="line">    print(f&#x27;┃ enc3 = &#123;enc3&#125;&#x27;)</span><br></pre></td></tr></table></figure><h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><p>给出了 p + q和n，没什么好说的直接就能解</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">hint1 = 18978581186415161964839647137704633944599150543420658500585655372831779670338724440572792208984183863860898382564328183868786589851370156024615630835636170</span><br><span class="line">n1, e1 = (89839084450618055007900277736741312641844770591346432583302975236097465068572445589385798822593889266430563039645335037061240101688433078717811590377686465973797658355984717210228739793741484666628342039127345855467748247485016133560729063901396973783754780048949709195334690395217112330585431653872523325589, 65537)</span><br><span class="line">enc1 = 23664702267463524872340419776983638860234156620934868573173546937679196743146691156369928738109129704387312263842088573122121751421709842579634121187349747424486233111885687289480494785285701709040663052248336541918235910988178207506008430080621354232140617853327942136965075461701008744432418773880574136247</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(pow(enc1, inverse(e, (n - hint1 + 1)), n1)))) </span><br></pre></td></tr></table></figure><h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><p>题目给出了 $h_i = a_ip+b_iq$<br>由于$a_i$和$b_i$都是小量所以很容易想到构造格来规约<br>给了100组式子，我们利用前两组和剩下的98组来消元：<br>$a_1a_ib_2h_1 - a_1a_2b_ih_1 - a_1a_ib_1h_2 + a_1^2b_ih_2 + a_1a_2b_1h_i + a_1^2b_2h_i = 0$</p><p>我们可以发现有公共系数a1所以有：<br>$a_ib_2h_1 - a_2b_ih_1 - a_ib_1h_2 + a_1b_ih_2 + a_2b_1h_i + a_1b_2h_i = 0$</p><p>提取出来系数有：<br>$(a_ib_2 - a_2b_i)h_1 - (a_ib_1 + a_1b_i)h_2 + (a_2b_1 + a_1b_2)h_i = 0$</p><p>参考maple的做法，大致思路是把这三个等式做groebner_basis，由于等式不够，所以肯定不能得到a、b的值，但是却可以得到a、b的线性等式，因此可以再做一次LLL后gcd解决：<a href="https://blog.maple3142.net/2023/09/03/downunderctf-2023-writeups/?highlight=apbq#apbq-rsa-ii" style="color: blue; text-decoration: underline;">DownUnderCTF 2023 Writeups</a><br>参考官方wp：<a herf= " https://my-ctf-challenges/downunderctf-2023/apbq-rsa-ii/solve/solv.sage at main · josephsurin/my-ctf-challenges" style="color: blue; text-decoration: underline;">官方wp</a></p><p>exp(这里主要参考了官方wp):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def find_factor(n, hints):</span><br><span class="line"></span><br><span class="line">V = hints[:4]</span><br><span class="line">k = 2^800</span><br><span class="line">M = Matrix.column([k * v for v in V]).augment(Matrix.identity(len(V)))</span><br><span class="line">B = [b[1:] for b in M.LLL()]</span><br><span class="line">M = (k * Matrix(B[:len(V)-2])).T.augment(Matrix.identity(len(V)))</span><br><span class="line">B = [b[-len(V):] for b in M.LLL() if set(b[:len(V)-2]) == &#123;0&#125;]</span><br><span class="line"></span><br><span class="line">for s, t in itertools.product(range(4), repeat=2):</span><br><span class="line">    T = s*B[0] + t*B[1]</span><br><span class="line">    a1, a2, a3, a4 = T</span><br><span class="line">    kq = gcd(a1 * hints[1] - a2 * hints[0], n)</span><br><span class="line">    if 1 &lt; kq &lt; n:</span><br><span class="line">        print(&#x27;find!&#x27;, kq, s, t)</span><br><span class="line">        return kq</span><br><span class="line"></span><br><span class="line">return None</span><br><span class="line"></span><br><span class="line">def simplify_factor(kq):</span><br><span class="line">    </span><br><span class="line">    for i in range(2**16, 1, -1):</span><br><span class="line">        if kq % i == 0:</span><br><span class="line">            kq //= i</span><br><span class="line">    return kq</span><br><span class="line"></span><br><span class="line">hints = []</span><br><span class="line">n, e = (, 0x10001)</span><br><span class="line">enc2 = 0</span><br><span class="line"></span><br><span class="line">kq = find_factor(n, hints)</span><br><span class="line"></span><br><span class="line">if kq:</span><br><span class="line">    q = int(simplify_factor(kq))</span><br><span class="line">    p = int(n // q)</span><br><span class="line">    d = inverse(e, -1, (p - 1) * (q - 1))</span><br><span class="line">    m = pow(enc2, d, n)</span><br><span class="line">    flag2 = long_to_bytes(m).decode()</span><br><span class="line">    print(flag2)</span><br></pre></td></tr></table></figure><h3 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h3><p>题目出的出问题了用了第二部分的私钥就能解密</p><p>题目给出了：<br>    $c_1 = ap + q$<br>    $c_2 = p + bq$</p><p>很明显有：<br>    $(c_1-q)(c_2-p) = 0 (mod n)$</p><p>展开有：<br>    $c_1c_2 - c_1p - c_2q = 0 (mod n)$</p><p>我们可以有：<br>    $c_1c_2-c_1(2^2 p_h+i)-c_2(2^2 q_h+j) = 0 (mod n)$</p><p>这里参考了鸡块师傅：<mark><a href="https://tangcuxiaojikuai.xyz/post/df3f7032.html#more">https://tangcuxiaojikuai.xyz/post/df3f7032.html#more</a></mark></p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hint3 = (, )</span><br><span class="line">n3,e3 = (, 65537)</span><br><span class="line">enc3 = </span><br><span class="line">c1,c2 = hint3</span><br><span class="line"></span><br><span class="line">brute = 2</span><br><span class="line">for i in range(2^brute):</span><br><span class="line">    for j in range(2^brute):</span><br><span class="line">        L = Matrix(ZZ, [</span><br><span class="line">            [1,0,0,2^brute*c1],</span><br><span class="line">            [0,1,0,2^brute*c2],</span><br><span class="line">            [0,0,2^(512-brute),c1*i+c2*j-c1*c2],</span><br><span class="line">            [0,0,0,n3]</span><br><span class="line">        ])</span><br><span class="line">        L[:,-1:] *= n3</span><br><span class="line">        res = L.LLL()[0]</span><br><span class="line"></span><br><span class="line">        p = 2^brute*abs(res[0])+i</span><br><span class="line">        if(n3 % p == 0):</span><br><span class="line">            print(p)</span><br></pre></td></tr></table></figure><h2 id="21step"><a href="#21step" class="headerlink" title="21step"></a>21step</h2><p>题目描述<br>    weight it in 21 steps!</p><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import random</span><br><span class="line">from secrets import flag</span><br><span class="line">print(f&#x27;Can you weight a 128 bits number in 21 steps&#x27;)</span><br><span class="line">pattern = r&#x27;([AB]|\d+)=([AB]|\d+)(\+|\-|\*|//|&lt;&lt;|&gt;&gt;|&amp;|\^|%)([AB]|\d+)&#x27;</span><br><span class="line"></span><br><span class="line">command = input().strip()</span><br><span class="line">assert command[-1] == &#x27;;&#x27;</span><br><span class="line">assert all([re.fullmatch(pattern, i) for i in command[:-1].split(&#x27;;&#x27;)])</span><br><span class="line"></span><br><span class="line">step = 21</span><br><span class="line">for i in command[:-1].split(&#x27;;&#x27;):</span><br><span class="line">    t = i.translate(str.maketrans(&#x27;&#x27;, &#x27;&#x27;, &#x27;=AB0123456789&#x27;))</span><br><span class="line">    if t in [&#x27;&gt;&gt;&#x27;, &#x27;&lt;&lt;&#x27;, &#x27;+&#x27;, &#x27;-&#x27;, &#x27;&amp;&#x27;, &#x27;^&#x27;]:</span><br><span class="line">        step -= 1</span><br><span class="line">    elif t in [&#x27;*&#x27;, &#x27;/&#x27;, &#x27;%&#x27;]:</span><br><span class="line">        step -= 3</span><br><span class="line">if step &lt; 0:exit()</span><br><span class="line"></span><br><span class="line">success = 0</span><br><span class="line">w = lambda x: sum([int(i) for i in list(bin(x)[2:])])</span><br><span class="line">for _ in range(100):</span><br><span class="line">    A = random.randrange(0, 2**128)</span><br><span class="line">    wa = w(A)</span><br><span class="line">    B = 0</span><br><span class="line">    try : exec(&quot;global A; global B;&quot; + command)</span><br><span class="line">    except : exit()</span><br><span class="line">    if A == wa:</span><br><span class="line">        success += 1</span><br><span class="line"></span><br><span class="line">if success == 100:</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>在赛中的时候是硬想，通过按位与操作来筛选数据<br>通过与1010….,11001100….,11110000……,的按位与操作筛选出A的1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B=A&gt;&gt;1;B=B&amp;113427455640312821154458202477256070485;A=A-B;B=A&amp;68056473384187692692674921486353642291;A=A&gt;&gt;2;A=A&amp;68056473384187692692674921486353642291;A=A+B;B=A&gt;&gt;4;A=A+B;A=A&amp;20016609818878733144904388672456953615;B=A&gt;&gt;8;A=A+B;B=A&gt;&gt;16;A=A+B;B=A&gt;&gt;32;A=A+B;B=A&gt;&gt;64;A=A+B;A=A&amp;127;</span><br></pre></td></tr></table></figure><p>在赛后看鸡块师傅的博客才知道有：<mark><a href="https://stackoverflow.com/questions/15233121/calculating-hamming-weight-in-o1">https://stackoverflow.com/questions/15233121/calculating-hamming-weight-in-o1</a></mark></p>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>说明</title>
      <link href="/2024/12/03/2024-crypto-wp-%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/12/03/2024-crypto-wp-%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<!-- ---title: 文章标题date: 创建日期updated: 更新日期cover: 文章封面description: 文章描述swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前--- --><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这算是真正的第一篇文章，此分类主要致力于记录我参与或复现各类比赛的题目，同时也会记下我在过程中遭遇的问题以及突发的奇思妙想。倘若存在错误或者有其他更佳的思路,热烈欢迎各位师傅予以指正。</p><p>我也学习一下鸡块师傅的做法：</p><ul><li>赛中做出的题目,名字无变化。</li><li>赛中未做出赛后复现的标 *。</li><li>赛中未做出，赛后也没有思路的标 $。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从0开始的ctf-crypto之旅</title>
      <link href="/2024/12/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/"/>
      <url>/2024/12/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<!-- ---title: 文章标题date: 创建日期updated: 更新日期cover: 文章封面description: 文章描述swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前--- --><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h2><p>在ctf比赛中，crypto方向python语言是最常用也是最好用的语言，所以上来的第一步就是安装python环境。</p><h3 id="一-获取电脑的处理器型号"><a href="#一-获取电脑的处理器型号" class="headerlink" title="(一)获取电脑的处理器型号"></a>(一)获取电脑的处理器型号</h3><p>按下Win+R键，输入cmd或直接在开始菜单搜索命令提示符，进入命令提示符界面，输入以下指令获取处理器型号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE%</span><br></pre></td></tr></table></figure><p><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/1.webp" alt="获取处理器型号"></p><p>如图显示此电脑是AMD64处理器。</p><h3 id="二-安装python"><a href="#二-安装python" class="headerlink" title="(二)安装python"></a>(二)安装python</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>python官网网址: <a href="https://www.python.org/">Welcome to Python.org</a><br>选择下载windows版python。<br><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/2.webp" alt="下载python"></p><p>由于此电脑是AMD64处理器，因此在确认要下载的python版本后选择 Windows installer(64-bit) 或 Windows x86-64 executable installer ，如下图所示：<br><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/3.webp" alt="选择下载版本"></p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><p>可执行程序，老版本的python会有一个Install launcher for all users选项，请务必勾选，同时选择项会有一个add <strong>**</strong> to PATH也请务必勾选，新版本会默认安装。<br><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/4.webp" alt="安装选项"></p><p>安装完成后按下Win+R键，运行cmd或直接在开始菜单搜索命令提示符后进入命令提示符界面，输入以下指令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><br>下图为安装成功的示例：</p><p><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/5.webp" alt="安装成功"></p><h3 id="三-安装编辑器"><a href="#三-安装编辑器" class="headerlink" title="(三)安装编辑器"></a>(三)安装编辑器</h3><blockquote>  <p>不对任何编辑器进行推荐，我最开始使用的是pycharm所以用pycharm进行演示</p> </blockquote><h4 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h4><p>pycharm网址:<br><a href="https://www.jetbrains.com/pycharm/download/?section=windows">Download PyCharm: The Python IDE for data science and web development by JetBrains</a><br>任选一个download，并选择去下载其他版本，根据处理器型号选择下载版本。<br><img src="https://source.yizhixiaojiuli.cn/img/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84ctf-crypto%E4%B9%8B%E6%97%85/6.webp" alt="下载pycharm"></p><h4 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2.安装"></a>2.安装</h4><p>运行可执行程序，推荐同意全部选项，一直点下一步即可，安装会很慢。<br>安装成功后，重启电脑。</p><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h4><h5 id="安装中文语言包插件"><a href="#安装中文语言包插件" class="headerlink" title="安装中文语言包插件"></a>安装中文语言包插件</h5><ul><li>打开 PyCharm，进入顶部菜单 File &gt; Settings（Windows/Linux）或 PyCharm &gt; Preferences（macOS）</li><li>在左侧面板中选择 Plugins</li><li>点击顶部的 Marketplace 选项卡</li><li>在搜索框中输入 Chinese (Simplified) Language Pack</li><li>找到插件后点击 Install 按钮</li><li>安装完成后点击 Restart IDE 重启 PyCharm</li></ul><h3 id="四-python库管理"><a href="#四-python库管理" class="headerlink" title="(四)python库管理"></a>(四)python库管理</h3><p><blockquote>  <p>分标准库存储路径为<br /> C:\Users\用户\AppData\Local\Programs\Python\Python版本\Lib<br /> 第三方库默认安装路径<br /> C:\Users\用户\AppData\Local\Programs\Python\Python版本\Lib\site-packages\</p> </blockquote><br>虽然python安装时会自带一些标准库，但在日常编程还需要安装很多第三方库，虽然使用conda很方便，但使用pip安装也是一个好选择，按下Win+R键，运行cmd或直接在开始菜单搜索命令提示符后进入命令提示符界面进行操作。</p><h4 id="1-安装指定版本的库"><a href="#1-安装指定版本的库" class="headerlink" title="1.安装指定版本的库"></a>1.安装指定版本的库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名==版本号</span><br></pre></td></tr></table></figure><h4 id="2-使用国内镜像安装库"><a href="#2-使用国内镜像安装库" class="headerlink" title="2.使用国内镜像安装库"></a>2.使用国内镜像安装库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名 -i URL_ADDRESS</span><br><span class="line">pip install 库名 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><p>其中<a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple为清华镜像源。">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple为清华镜像源。</a></p><h4 id="3-升级某个库到最新的方法"><a href="#3-升级某个库到最新的方法" class="headerlink" title="3.升级某个库到最新的方法"></a>3.升级某个库到最新的方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade 库名</span><br></pre></td></tr></table></figure><h4 id="4-卸载某个库"><a href="#4-卸载某个库" class="headerlink" title="4.卸载某个库"></a>4.卸载某个库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 库名</span><br></pre></td></tr></table></figure><h4 id="5-查看已安装的库"><a href="#5-查看已安装的库" class="headerlink" title="5.查看已安装的库"></a>5.查看已安装的库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> crypto - study </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
