<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开启记录之旅</title>
      <link href="/2024/12/03/2024-crypto-wp-%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/12/03/2024-crypto-wp-%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<!-- ---title: 文章标题date: 创建日期updated: 更新日期cover: 文章封面description: 文章描述swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前--- --><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这算是真正的第一篇文章，此分类主要致力于记录我参与或复现各类比赛的题目，同时也会记下我在过程中遭遇的问题以及突发的奇思妙想。倘若存在错误或者有其他更佳的思路,热烈欢迎各位师傅予以指正。</p><p>我也学习一下鸡块师傅的做法：</p><ul><li>赛中做出的题目,名字无变化。</li><li>赛中未做出赛后复现的标 *。</li><li>赛中未做出，赛后也没有思路的标 $。</li></ul>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-强网杯-wp</title>
      <link href="/2024/12/03/2024-%E5%BC%BA%E7%BD%91%E6%9D%AF-wp/"/>
      <url>/2024/12/03/2024-%E5%BC%BA%E7%BD%91%E6%9D%AF-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="EasyRSA"><a href="#EasyRSA" class="headerlink" title="EasyRSA"></a>EasyRSA</h2><p>题目描述：</p><pre><code>easy的RSA。</code></pre><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#encoding:utf-8</span><br><span class="line">from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime</span><br><span class="line">import random, gmpy2</span><br><span class="line"></span><br><span class="line">class RSAEncryptor:</span><br><span class="line">def __init__(self):</span><br><span class="line">self.g = self.a = self.b = 0</span><br><span class="line">self.e = 65537</span><br><span class="line">self.factorGen()</span><br><span class="line">self.product()</span><br><span class="line"></span><br><span class="line">def factorGen(self):</span><br><span class="line">while True:</span><br><span class="line">self.g = getPrime(500)</span><br><span class="line">while not gmpy2.is_prime(2*self.g*self.a+1):</span><br><span class="line">self.a = random.randint(2**523, 2**524)</span><br><span class="line">while not gmpy2.is_prime(2*self.g*self.b+1):</span><br><span class="line">self.b = random.randint(2**523, 2**524)</span><br><span class="line">self.h = 2*self.g*self.a*self.b+self.a+self.b</span><br><span class="line">if gmpy2.is_prime(self.h):</span><br><span class="line">self.N = 2*self.h*self.g+1</span><br><span class="line">print(len(bin(self.N)))</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">def encrypt(self, msg):</span><br><span class="line">return gmpy2.powmod(msg, self.e, self.N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def product(self):</span><br><span class="line">with open(&#x27;/flag&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">self.flag = f.read()</span><br><span class="line">self.enc = self.encrypt(self.flag)</span><br><span class="line">self.show()</span><br><span class="line">print(f&#x27;enc=&#123;self.enc&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">def show(self):</span><br><span class="line">print(f&quot;N=&#123;self.N&#125;&quot;)</span><br><span class="line">print(f&quot;e=&#123;self.e&#125;&quot;)</span><br><span class="line">print(f&quot;g=&#123;self.g&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RSAEncryptor()</span><br></pre></td></tr></table></figure><p>其中有：</p><pre><code>            p = 2ga + 1            q = 2gb + 1</code></pre><p>很明显的Common Prime RSA攻击,又因为泄露了g，找到解密脚本直接套用即可</p><p>Common Prime RSA 笔记 | 独奏の小屋 (hasegawaazusa.github.io)</p><p>其中bsgs那一行可能是sage版本问题会报错，搜下sage文档的bsgs参数然后照着改掉就好。</p><p>exp：</p><p>N&#x3D;18609249586511447022929188601029606630816796460795187470065452150283160549624372398383148374249992521068549349516037511009027303530058706112191091689108542770802393390942693648814845389265858611340109158309645284100825624911741650444467173946569096983438455034895955228543351436008546035535031019474847660151534447157873386841134028651786166708821300066332734338450150803713659027324704224480646285707278634645234095122804559045312923819794776928194098487972764363649361713512731460059740929840789043447155551107435766468071813945331313861835289050624825980714650042186547867057986370794200778277570803957071502251887<br>e&#x3D;65537<br>g&#x3D;2157382166227048008151606160068683153029902706798753603550075684775242674106840467207794609506075603345430902709796320595040305496549488048759451499003<br>enc&#x3D;1706676139782916859705617140716929473350550599143215409850324617375385155893376548401557158261122335220199922229225746433590875391358929714141838314015655361989993985070285957305126847445442699828095001203266978036575956723172054402632901673504599481917025056824986547174258708944098866240451432510310007060414500907941107101001004474036283249456230343043785187819423163986135104740039129111213967847515011092231384245986891933365405336421413444499204268699546739391271911481490278065027465465222639265899471823742196086481403499948301061349936225773314002398442541447810628796808530412232638250097430811300924120316<br>gamma &#x3D; 500&#x2F;(1024*2)<br>cbits &#x3D; ceil(nbits * (0.5 - 2 * gamma))</p><p>M &#x3D; (N - 1) &#x2F;&#x2F; (2 * g)<br>u &#x3D; M &#x2F;&#x2F; (2 * g)<br>v &#x3D; M - 2 * g * u<br>GF &#x3D; Zmod(N)<br>x &#x3D; GF.random_element()<br>y &#x3D; x ^ (2 * g)</p><h1 id="c的范围大概与N-0-5-2-gamma-很接近"><a href="#c的范围大概与N-0-5-2-gamma-很接近" class="headerlink" title="c的范围大概与N^(0.5-2*gamma)很接近"></a>c的范围大概与N^(0.5-2*gamma)很接近</h1><p>c &#x3D; bsgs(y, y ^ u, (2**(cbits-1), 2**(cbits+1)), operation&#x3D;’<em>‘)<br>#(a, b, bounds, operation&#x3D;’</em>‘, identity&#x3D;None, inverse&#x3D;None, op&#x3D;None)<br>ab &#x3D; u - c<br>apb &#x3D; v + 2 * g * c<br>P.<x> &#x3D; ZZ[]<br>f &#x3D; x ^ 2 - apb * x + ab<br>a &#x3D; f.roots()<br>if a:<br>    a, b &#x3D; a[0][0], a[1][0]<br>    p &#x3D; 2 * g * a + 1<br>    q &#x3D; 2 * g * b + 1<br>    assert p * q &#x3D;&#x3D; N</p><p>from Crypto.Util.number import *<br>print(long_to_bytes(int(pow(enc,inverse(e,(p-1)*(q-1)),N))))</p><p>#flag{a4fc2d54-0ab3-492a-a82b-762705d83cff}</p>]]></content>
      
      
      <categories>
          
          <category> crypto - write_up </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
